
ReflowControllerFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000804  08005040  08005040  00015040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005844  08005844  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005844  08005844  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005844  08005844  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005844  08005844  00015844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005848  08005848  00015848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800584c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  2000007c  080058c8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  080058c8  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de87  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000222c  00000000  00000000  0002df2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00030158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00031030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189a7  00000000  00000000  00031e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011317  00000000  00000000  0004a7af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd6a  00000000  00000000  0005bac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9830  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004214  00000000  00000000  000e9880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005028 	.word	0x08005028

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08005028 	.word	0x08005028

0800014c <Encoder_Read>:
void initEncoder(){


}

int Encoder_Read(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	static uint32_t prev = 0;
	static uint32_t curr = 0;
	curr = (TIM3->CNT)>>2;
 8000150:	4b10      	ldr	r3, [pc, #64]	; (8000194 <Encoder_Read+0x48>)
 8000152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000154:	089b      	lsrs	r3, r3, #2
 8000156:	4a10      	ldr	r2, [pc, #64]	; (8000198 <Encoder_Read+0x4c>)
 8000158:	6013      	str	r3, [r2, #0]
	static int dir = 0;
	dir = prev-curr;
 800015a:	4b10      	ldr	r3, [pc, #64]	; (800019c <Encoder_Read+0x50>)
 800015c:	681a      	ldr	r2, [r3, #0]
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <Encoder_Read+0x4c>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	1ad3      	subs	r3, r2, r3
 8000164:	461a      	mov	r2, r3
 8000166:	4b0e      	ldr	r3, [pc, #56]	; (80001a0 <Encoder_Read+0x54>)
 8000168:	601a      	str	r2, [r3, #0]
	prev = curr;
 800016a:	4b0b      	ldr	r3, [pc, #44]	; (8000198 <Encoder_Read+0x4c>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a0b      	ldr	r2, [pc, #44]	; (800019c <Encoder_Read+0x50>)
 8000170:	6013      	str	r3, [r2, #0]
	if (dir > 3 || dir < -3){
 8000172:	4b0b      	ldr	r3, [pc, #44]	; (80001a0 <Encoder_Read+0x54>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	2b03      	cmp	r3, #3
 8000178:	dc04      	bgt.n	8000184 <Encoder_Read+0x38>
 800017a:	4b09      	ldr	r3, [pc, #36]	; (80001a0 <Encoder_Read+0x54>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	f113 0f03 	cmn.w	r3, #3
 8000182:	da01      	bge.n	8000188 <Encoder_Read+0x3c>
			return 0;
 8000184:	2300      	movs	r3, #0
 8000186:	e001      	b.n	800018c <Encoder_Read+0x40>
	}
	else return dir;
 8000188:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <Encoder_Read+0x54>)
 800018a:	681b      	ldr	r3, [r3, #0]
}
 800018c:	4618      	mov	r0, r3
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40000400 	.word	0x40000400
 8000198:	20000098 	.word	0x20000098
 800019c:	2000009c 	.word	0x2000009c
 80001a0:	200000a0 	.word	0x200000a0

080001a4 <Encoder_Tapped>:

bool Encoder_Tapped(){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
	static bool debouncing = false;
	static GPIO_PinState prev = GPIO_PIN_SET;
	static GPIO_PinState current = GPIO_PIN_SET;
	current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80001aa:	2120      	movs	r1, #32
 80001ac:	4818      	ldr	r0, [pc, #96]	; (8000210 <Encoder_Tapped+0x6c>)
 80001ae:	f002 f949 	bl	8002444 <HAL_GPIO_ReadPin>
 80001b2:	4603      	mov	r3, r0
 80001b4:	461a      	mov	r2, r3
 80001b6:	4b17      	ldr	r3, [pc, #92]	; (8000214 <Encoder_Tapped+0x70>)
 80001b8:	701a      	strb	r2, [r3, #0]
	bool tapped = false;
 80001ba:	2300      	movs	r3, #0
 80001bc:	71fb      	strb	r3, [r7, #7]

	if (debouncing){
 80001be:	4b16      	ldr	r3, [pc, #88]	; (8000218 <Encoder_Tapped+0x74>)
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d006      	beq.n	80001d4 <Encoder_Tapped+0x30>
		HAL_Delay(1000);
 80001c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ca:	f001 fca5 	bl	8001b18 <HAL_Delay>
		debouncing = false;
 80001ce:	4b12      	ldr	r3, [pc, #72]	; (8000218 <Encoder_Tapped+0x74>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	701a      	strb	r2, [r3, #0]
	}

	if (!debouncing && prev == GPIO_PIN_SET && current == GPIO_PIN_RESET){
 80001d4:	4b10      	ldr	r3, [pc, #64]	; (8000218 <Encoder_Tapped+0x74>)
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	f083 0301 	eor.w	r3, r3, #1
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d00c      	beq.n	80001fc <Encoder_Tapped+0x58>
 80001e2:	4b0e      	ldr	r3, [pc, #56]	; (800021c <Encoder_Tapped+0x78>)
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d108      	bne.n	80001fc <Encoder_Tapped+0x58>
 80001ea:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <Encoder_Tapped+0x70>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d104      	bne.n	80001fc <Encoder_Tapped+0x58>
		tapped = true;
 80001f2:	2301      	movs	r3, #1
 80001f4:	71fb      	strb	r3, [r7, #7]
		debouncing = true;
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <Encoder_Tapped+0x74>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	701a      	strb	r2, [r3, #0]
	}

	prev = current;
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <Encoder_Tapped+0x70>)
 80001fe:	781a      	ldrb	r2, [r3, #0]
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <Encoder_Tapped+0x78>)
 8000202:	701a      	strb	r2, [r3, #0]
	return tapped;
 8000204:	79fb      	ldrb	r3, [r7, #7]

}
 8000206:	4618      	mov	r0, r3
 8000208:	3708      	adds	r7, #8
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40010800 	.word	0x40010800
 8000214:	20000000 	.word	0x20000000
 8000218:	200000a4 	.word	0x200000a4
 800021c:	20000001 	.word	0x20000001

08000220 <updateEncoder>:
Encoder updateEncoder(){
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	Encoder enc;
	enc.tapped = Encoder_Tapped();
 8000228:	f7ff ffbc 	bl	80001a4 <Encoder_Tapped>
 800022c:	4603      	mov	r3, r0
 800022e:	723b      	strb	r3, [r7, #8]
	enc.direction = Encoder_Read();
 8000230:	f7ff ff8c 	bl	800014c <Encoder_Read>
 8000234:	4603      	mov	r3, r0
 8000236:	60fb      	str	r3, [r7, #12]

	return enc;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	461a      	mov	r2, r3
 800023c:	f107 0308 	add.w	r3, r7, #8
 8000240:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000244:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid){
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]

	//clear controller variables
	pid->integrator = 0.0f;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f04f 0200 	mov.w	r2, #0
 800025e:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError = 0.0f;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f04f 0200 	mov.w	r2, #0
 8000266:	629a      	str	r2, [r3, #40]	; 0x28
	pid->differentiator = 0.0f;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f04f 0200 	mov.w	r2, #0
 800026e:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f04f 0200 	mov.w	r2, #0
 8000276:	631a      	str	r2, [r3, #48]	; 0x30
	pid->out = 0.0f;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f04f 0200 	mov.w	r2, #0
 800027e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr
	...

0800028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800028c:	b5b0      	push	{r4, r5, r7, lr}
 800028e:	b09c      	sub	sp, #112	; 0x70
 8000290:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000292:	f001 fbdf 	bl	8001a54 <HAL_Init>

  /* USER CODE BEGIN Init */
  PIDController pid;
  Profile profile;
  profile.temp1 = 150;
 8000296:	2396      	movs	r3, #150	; 0x96
 8000298:	83fb      	strh	r3, [r7, #30]
  profile.time1 = 60;
 800029a:	233c      	movs	r3, #60	; 0x3c
 800029c:	83bb      	strh	r3, [r7, #28]
  profile.temp2 = 150;
 800029e:	2396      	movs	r3, #150	; 0x96
 80002a0:	847b      	strh	r3, [r7, #34]	; 0x22
  profile.time2 = 180;
 80002a2:	23b4      	movs	r3, #180	; 0xb4
 80002a4:	843b      	strh	r3, [r7, #32]
  profile.temp3 = 250;
 80002a6:	23fa      	movs	r3, #250	; 0xfa
 80002a8:	84fb      	strh	r3, [r7, #38]	; 0x26
  profile.time3 = 240;
 80002aa:	23f0      	movs	r3, #240	; 0xf0
 80002ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  profile.temp4 = 250;
 80002ae:	23fa      	movs	r3, #250	; 0xfa
 80002b0:	857b      	strh	r3, [r7, #42]	; 0x2a
  profile.time4 = 300;
 80002b2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80002b6:	853b      	strh	r3, [r7, #40]	; 0x28
  profile.time3 = *(__IO int *) 0x08004424;
  profile.temp4 = *(__IO int *) 0x08004428;
  profile.time4 = *(__IO int *) 0x0800442C;
  */
  Encoder encoder;
  encoder.tapped = false;
 80002b8:	2300      	movs	r3, #0
 80002ba:	753b      	strb	r3, [r7, #20]
  encoder.direction = 0;
 80002bc:	2300      	movs	r3, #0
 80002be:	61bb      	str	r3, [r7, #24]
  PIDController_Init(&pid);
 80002c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80002c4:	4618      	mov	r0, r3
 80002c6:	f7ff ffc3 	bl	8000250 <PIDController_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 fa11 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f000 fba9 	bl	8000a24 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002d2:	f000 faa5 	bl	8000820 <MX_I2C1_Init>
  MX_TIM2_Init();
 80002d6:	f000 fad1 	bl	800087c <MX_TIM2_Init>
  MX_ADC1_Init();
 80002da:	f000 fa63 	bl	80007a4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80002de:	f000 fb4d 	bl	800097c <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80002e2:	2104      	movs	r1, #4
 80002e4:	48c8      	ldr	r0, [pc, #800]	; (8000608 <main+0x37c>)
 80002e6:	f003 fba1 	bl	8003a2c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80002ea:	213c      	movs	r1, #60	; 0x3c
 80002ec:	48c7      	ldr	r0, [pc, #796]	; (800060c <main+0x380>)
 80002ee:	f003 fcdb 	bl	8003ca8 <HAL_TIM_Encoder_Start>

  SSD1306_Init();
 80002f2:	f000 fd77 	bl	8000de4 <SSD1306_Init>
  Select state = START;
 80002f6:	2304      	movs	r3, #4
 80002f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  char string[20];
  rebuildScreen(&profile);
 80002fc:	f107 031c 	add.w	r3, r7, #28
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fbd1 	bl	8000aa8 <rebuildScreen>
  SSD1306_GotoXY(92, 53);
 8000306:	2135      	movs	r1, #53	; 0x35
 8000308:	205c      	movs	r0, #92	; 0x5c
 800030a:	f000 fed3 	bl	80010b4 <SSD1306_GotoXY>
  strncpy(string, "START", 10);
 800030e:	463b      	mov	r3, r7
 8000310:	220a      	movs	r2, #10
 8000312:	49bf      	ldr	r1, [pc, #764]	; (8000610 <main+0x384>)
 8000314:	4618      	mov	r0, r3
 8000316:	f004 fa1b 	bl	8004750 <strncpy>
  SSD1306_DrawFilledRectangle(91, 51, 128, 64, SSD1306_COLOR_WHITE);
 800031a:	2301      	movs	r3, #1
 800031c:	9300      	str	r3, [sp, #0]
 800031e:	2340      	movs	r3, #64	; 0x40
 8000320:	2280      	movs	r2, #128	; 0x80
 8000322:	2133      	movs	r1, #51	; 0x33
 8000324:	205b      	movs	r0, #91	; 0x5b
 8000326:	f001 f8e5 	bl	80014f4 <SSD1306_DrawFilledRectangle>
  SSD1306_Puts(string, &Font_7x10, SSD1306_COLOR_BLACK);
 800032a:	463b      	mov	r3, r7
 800032c:	2200      	movs	r2, #0
 800032e:	49b9      	ldr	r1, [pc, #740]	; (8000614 <main+0x388>)
 8000330:	4618      	mov	r0, r3
 8000332:	f000 ff55 	bl	80011e0 <SSD1306_Puts>

  SSD1306_DrawRectangle(47, 51, 128, 64, SSD1306_COLOR_WHITE);
 8000336:	2301      	movs	r3, #1
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	2340      	movs	r3, #64	; 0x40
 800033c:	2280      	movs	r2, #128	; 0x80
 800033e:	2133      	movs	r1, #51	; 0x33
 8000340:	202f      	movs	r0, #47	; 0x2f
 8000342:	f001 f86d 	bl	8001420 <SSD1306_DrawRectangle>
  SSD1306_DrawRectangle(69, 51, 128, 64, SSD1306_COLOR_WHITE);
 8000346:	2301      	movs	r3, #1
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	2340      	movs	r3, #64	; 0x40
 800034c:	2280      	movs	r2, #128	; 0x80
 800034e:	2133      	movs	r1, #51	; 0x33
 8000350:	2045      	movs	r0, #69	; 0x45
 8000352:	f001 f865 	bl	8001420 <SSD1306_DrawRectangle>
  SSD1306_UpdateScreen();
 8000356:	f000 fe09 	bl	8000f6c <SSD1306_UpdateScreen>
  while (1)
  {
	  encoder = updateEncoder();
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ff5e 	bl	8000220 <updateEncoder>
	  switch(state){
 8000364:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000368:	2b05      	cmp	r3, #5
 800036a:	d8f6      	bhi.n	800035a <main+0xce>
 800036c:	a201      	add	r2, pc, #4	; (adr r2, 8000374 <main+0xe8>)
 800036e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000372:	bf00      	nop
 8000374:	08000497 	.word	0x08000497
 8000378:	08000533 	.word	0x08000533
 800037c:	0800059d 	.word	0x0800059d
 8000380:	0800062d 	.word	0x0800062d
 8000384:	0800038d 	.word	0x0800038d
 8000388:	08000453 	.word	0x08000453
	  case START:
		  SSD1306_GotoXY(48,53);
 800038c:	2135      	movs	r1, #53	; 0x35
 800038e:	2030      	movs	r0, #48	; 0x30
 8000390:	f000 fe90 	bl	80010b4 <SSD1306_GotoXY>
		  strncpy(string, "---", 8);
 8000394:	463b      	mov	r3, r7
 8000396:	2208      	movs	r2, #8
 8000398:	499f      	ldr	r1, [pc, #636]	; (8000618 <main+0x38c>)
 800039a:	4618      	mov	r0, r3
 800039c:	f004 f9d8 	bl	8004750 <strncpy>
		  SSD1306_Puts(string, &Font_7x10, 1);
 80003a0:	463b      	mov	r3, r7
 80003a2:	2201      	movs	r2, #1
 80003a4:	499b      	ldr	r1, [pc, #620]	; (8000614 <main+0x388>)
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 ff1a 	bl	80011e0 <SSD1306_Puts>
		  SSD1306_GotoXY(70,53);
 80003ac:	2135      	movs	r1, #53	; 0x35
 80003ae:	2046      	movs	r0, #70	; 0x46
 80003b0:	f000 fe80 	bl	80010b4 <SSD1306_GotoXY>
		  strncpy(string, "---", 8);
 80003b4:	463b      	mov	r3, r7
 80003b6:	2208      	movs	r2, #8
 80003b8:	4997      	ldr	r1, [pc, #604]	; (8000618 <main+0x38c>)
 80003ba:	4618      	mov	r0, r3
 80003bc:	f004 f9c8 	bl	8004750 <strncpy>
		  SSD1306_Puts(string, &Font_7x10, 1);
 80003c0:	463b      	mov	r3, r7
 80003c2:	2201      	movs	r2, #1
 80003c4:	4993      	ldr	r1, [pc, #588]	; (8000614 <main+0x388>)
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 ff0a 	bl	80011e0 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 80003cc:	f000 fdce 	bl	8000f6c <SSD1306_UpdateScreen>
		 if (encoder.tapped){
 80003d0:	7d3b      	ldrb	r3, [r7, #20]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d01d      	beq.n	8000412 <main+0x186>
			  state = CANCEL;
 80003d6:	2305      	movs	r3, #5
 80003d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  // mark start button
			  SSD1306_GotoXY(92, 53);
 80003dc:	2135      	movs	r1, #53	; 0x35
 80003de:	205c      	movs	r0, #92	; 0x5c
 80003e0:	f000 fe68 	bl	80010b4 <SSD1306_GotoXY>
			  strncpy(string, "QUIT ", 10);
 80003e4:	463b      	mov	r3, r7
 80003e6:	220a      	movs	r2, #10
 80003e8:	498c      	ldr	r1, [pc, #560]	; (800061c <main+0x390>)
 80003ea:	4618      	mov	r0, r3
 80003ec:	f004 f9b0 	bl	8004750 <strncpy>
			  SSD1306_DrawFilledRectangle(91, 51, 128, 64, SSD1306_COLOR_WHITE);
 80003f0:	2301      	movs	r3, #1
 80003f2:	9300      	str	r3, [sp, #0]
 80003f4:	2340      	movs	r3, #64	; 0x40
 80003f6:	2280      	movs	r2, #128	; 0x80
 80003f8:	2133      	movs	r1, #51	; 0x33
 80003fa:	205b      	movs	r0, #91	; 0x5b
 80003fc:	f001 f87a 	bl	80014f4 <SSD1306_DrawFilledRectangle>
			  SSD1306_Puts(string, &Font_7x10, SSD1306_COLOR_BLACK);
 8000400:	463b      	mov	r3, r7
 8000402:	2200      	movs	r2, #0
 8000404:	4983      	ldr	r1, [pc, #524]	; (8000614 <main+0x388>)
 8000406:	4618      	mov	r0, r3
 8000408:	f000 feea 	bl	80011e0 <SSD1306_Puts>
			  SSD1306_UpdateScreen();
 800040c:	f000 fdae 	bl	8000f6c <SSD1306_UpdateScreen>
		  else if (encoder.direction == -1){
			  state = POINT4;
			  // unmark start button
			  SSD1306_DrawLine(92, 52, 127, 52, SSD1306_COLOR_BLACK);
		  }
		  break;
 8000410:	e15b      	b.n	80006ca <main+0x43e>
		 else if (encoder.direction == 1){
 8000412:	69bb      	ldr	r3, [r7, #24]
 8000414:	2b01      	cmp	r3, #1
 8000416:	d10b      	bne.n	8000430 <main+0x1a4>
			  state = POINT1;
 8000418:	2300      	movs	r3, #0
 800041a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  SSD1306_DrawLine(92, 52, 127, 52, SSD1306_COLOR_BLACK);
 800041e:	2300      	movs	r3, #0
 8000420:	9300      	str	r3, [sp, #0]
 8000422:	2334      	movs	r3, #52	; 0x34
 8000424:	227f      	movs	r2, #127	; 0x7f
 8000426:	2134      	movs	r1, #52	; 0x34
 8000428:	205c      	movs	r0, #92	; 0x5c
 800042a:	f000 fefe 	bl	800122a <SSD1306_DrawLine>
		  break;
 800042e:	e14c      	b.n	80006ca <main+0x43e>
		  else if (encoder.direction == -1){
 8000430:	69bb      	ldr	r3, [r7, #24]
 8000432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000436:	f040 8148 	bne.w	80006ca <main+0x43e>
			  state = POINT4;
 800043a:	2303      	movs	r3, #3
 800043c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  SSD1306_DrawLine(92, 52, 127, 52, SSD1306_COLOR_BLACK);
 8000440:	2300      	movs	r3, #0
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	2334      	movs	r3, #52	; 0x34
 8000446:	227f      	movs	r2, #127	; 0x7f
 8000448:	2134      	movs	r1, #52	; 0x34
 800044a:	205c      	movs	r0, #92	; 0x5c
 800044c:	f000 feed 	bl	800122a <SSD1306_DrawLine>
		  break;
 8000450:	e13b      	b.n	80006ca <main+0x43e>
	  case CANCEL:
		  if (encoder.tapped){
 8000452:	7d3b      	ldrb	r3, [r7, #20]
 8000454:	2b00      	cmp	r3, #0
 8000456:	f000 813a 	beq.w	80006ce <main+0x442>
			  state = START;
 800045a:	2304      	movs	r3, #4
 800045c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  // mark start button
			  SSD1306_GotoXY(92, 53);
 8000460:	2135      	movs	r1, #53	; 0x35
 8000462:	205c      	movs	r0, #92	; 0x5c
 8000464:	f000 fe26 	bl	80010b4 <SSD1306_GotoXY>
			  strncpy(string, "START", 10);
 8000468:	463b      	mov	r3, r7
 800046a:	220a      	movs	r2, #10
 800046c:	4968      	ldr	r1, [pc, #416]	; (8000610 <main+0x384>)
 800046e:	4618      	mov	r0, r3
 8000470:	f004 f96e 	bl	8004750 <strncpy>
			  SSD1306_DrawFilledRectangle(91, 51, 128, 64, SSD1306_COLOR_WHITE);
 8000474:	2301      	movs	r3, #1
 8000476:	9300      	str	r3, [sp, #0]
 8000478:	2340      	movs	r3, #64	; 0x40
 800047a:	2280      	movs	r2, #128	; 0x80
 800047c:	2133      	movs	r1, #51	; 0x33
 800047e:	205b      	movs	r0, #91	; 0x5b
 8000480:	f001 f838 	bl	80014f4 <SSD1306_DrawFilledRectangle>
			  SSD1306_Puts(string, &Font_7x10, SSD1306_COLOR_BLACK);
 8000484:	463b      	mov	r3, r7
 8000486:	2200      	movs	r2, #0
 8000488:	4962      	ldr	r1, [pc, #392]	; (8000614 <main+0x388>)
 800048a:	4618      	mov	r0, r3
 800048c:	f000 fea8 	bl	80011e0 <SSD1306_Puts>
			  SSD1306_UpdateScreen();
 8000490:	f000 fd6c 	bl	8000f6c <SSD1306_UpdateScreen>
		  }
		  break;
 8000494:	e11b      	b.n	80006ce <main+0x442>
	  case POINT1:
		  SSD1306_GotoXY(92, 53);
 8000496:	2135      	movs	r1, #53	; 0x35
 8000498:	205c      	movs	r0, #92	; 0x5c
 800049a:	f000 fe0b 	bl	80010b4 <SSD1306_GotoXY>
		  strncpy(string, " P1  ", 10);
 800049e:	463b      	mov	r3, r7
 80004a0:	220a      	movs	r2, #10
 80004a2:	495f      	ldr	r1, [pc, #380]	; (8000620 <main+0x394>)
 80004a4:	4618      	mov	r0, r3
 80004a6:	f004 f953 	bl	8004750 <strncpy>
		  SSD1306_Puts(string, &Font_7x10, SSD1306_COLOR_WHITE);
 80004aa:	463b      	mov	r3, r7
 80004ac:	2201      	movs	r2, #1
 80004ae:	4959      	ldr	r1, [pc, #356]	; (8000614 <main+0x388>)
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 fe95 	bl	80011e0 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 80004b6:	f000 fd59 	bl	8000f6c <SSD1306_UpdateScreen>

		  if (editValues(&profile, &profile.temp1, &profile.time1, encoder.tapped, encoder.direction)){
 80004ba:	7d3d      	ldrb	r5, [r7, #20]
 80004bc:	69bb      	ldr	r3, [r7, #24]
 80004be:	f107 041c 	add.w	r4, r7, #28
 80004c2:	f107 021c 	add.w	r2, r7, #28
 80004c6:	1c91      	adds	r1, r2, #2
 80004c8:	f107 001c 	add.w	r0, r7, #28
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	462b      	mov	r3, r5
 80004d0:	4622      	mov	r2, r4
 80004d2:	f000 fbb5 	bl	8000c40 <editValues>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	f040 80fa 	bne.w	80006d2 <main+0x446>
		  }
		  else if (encoder.direction == 1){
 80004de:	69bb      	ldr	r3, [r7, #24]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d103      	bne.n	80004ec <main+0x260>
			  state = POINT2;
 80004e4:	2301      	movs	r3, #1
 80004e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  strncpy(string, "START", 10);
			  SSD1306_DrawFilledRectangle(91, 51, 128, 64, SSD1306_COLOR_WHITE);
			  SSD1306_Puts(string, &Font_7x10, SSD1306_COLOR_BLACK);
			  SSD1306_UpdateScreen();
		  }
		  break;
 80004ea:	e0f2      	b.n	80006d2 <main+0x446>
		  else if (encoder.direction == -1){
 80004ec:	69bb      	ldr	r3, [r7, #24]
 80004ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004f2:	f040 80ee 	bne.w	80006d2 <main+0x446>
			  state = START;
 80004f6:	2304      	movs	r3, #4
 80004f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  SSD1306_GotoXY(92, 53);
 80004fc:	2135      	movs	r1, #53	; 0x35
 80004fe:	205c      	movs	r0, #92	; 0x5c
 8000500:	f000 fdd8 	bl	80010b4 <SSD1306_GotoXY>
			  strncpy(string, "START", 10);
 8000504:	463b      	mov	r3, r7
 8000506:	220a      	movs	r2, #10
 8000508:	4941      	ldr	r1, [pc, #260]	; (8000610 <main+0x384>)
 800050a:	4618      	mov	r0, r3
 800050c:	f004 f920 	bl	8004750 <strncpy>
			  SSD1306_DrawFilledRectangle(91, 51, 128, 64, SSD1306_COLOR_WHITE);
 8000510:	2301      	movs	r3, #1
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2340      	movs	r3, #64	; 0x40
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	2133      	movs	r1, #51	; 0x33
 800051a:	205b      	movs	r0, #91	; 0x5b
 800051c:	f000 ffea 	bl	80014f4 <SSD1306_DrawFilledRectangle>
			  SSD1306_Puts(string, &Font_7x10, SSD1306_COLOR_BLACK);
 8000520:	463b      	mov	r3, r7
 8000522:	2200      	movs	r2, #0
 8000524:	493b      	ldr	r1, [pc, #236]	; (8000614 <main+0x388>)
 8000526:	4618      	mov	r0, r3
 8000528:	f000 fe5a 	bl	80011e0 <SSD1306_Puts>
			  SSD1306_UpdateScreen();
 800052c:	f000 fd1e 	bl	8000f6c <SSD1306_UpdateScreen>
		  break;
 8000530:	e0cf      	b.n	80006d2 <main+0x446>
	  case POINT2:
		  SSD1306_GotoXY(92, 53);
 8000532:	2135      	movs	r1, #53	; 0x35
 8000534:	205c      	movs	r0, #92	; 0x5c
 8000536:	f000 fdbd 	bl	80010b4 <SSD1306_GotoXY>
		  strncpy(string, " P2  ", 10);
 800053a:	463b      	mov	r3, r7
 800053c:	220a      	movs	r2, #10
 800053e:	4939      	ldr	r1, [pc, #228]	; (8000624 <main+0x398>)
 8000540:	4618      	mov	r0, r3
 8000542:	f004 f905 	bl	8004750 <strncpy>
		  SSD1306_Puts(string, &Font_7x10, SSD1306_COLOR_WHITE);
 8000546:	463b      	mov	r3, r7
 8000548:	2201      	movs	r2, #1
 800054a:	4932      	ldr	r1, [pc, #200]	; (8000614 <main+0x388>)
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fe47 	bl	80011e0 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8000552:	f000 fd0b 	bl	8000f6c <SSD1306_UpdateScreen>

		  if (editValues(&profile, &profile.temp2, &profile.time2, encoder.tapped, encoder.direction)){
 8000556:	7d3d      	ldrb	r5, [r7, #20]
 8000558:	69bb      	ldr	r3, [r7, #24]
 800055a:	f107 021c 	add.w	r2, r7, #28
 800055e:	1d14      	adds	r4, r2, #4
 8000560:	f107 021c 	add.w	r2, r7, #28
 8000564:	1d91      	adds	r1, r2, #6
 8000566:	f107 001c 	add.w	r0, r7, #28
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	462b      	mov	r3, r5
 800056e:	4622      	mov	r2, r4
 8000570:	f000 fb66 	bl	8000c40 <editValues>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	f040 80ad 	bne.w	80006d6 <main+0x44a>
		  }
		  else if (encoder.direction == 1){
 800057c:	69bb      	ldr	r3, [r7, #24]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d103      	bne.n	800058a <main+0x2fe>
			  state = POINT3;
 8000582:	2302      	movs	r3, #2
 8000584:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		  }
		  else if (encoder.direction == -1){
			  state = POINT1;
		  }
		  break;
 8000588:	e0a5      	b.n	80006d6 <main+0x44a>
		  else if (encoder.direction == -1){
 800058a:	69bb      	ldr	r3, [r7, #24]
 800058c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000590:	f040 80a1 	bne.w	80006d6 <main+0x44a>
			  state = POINT1;
 8000594:	2300      	movs	r3, #0
 8000596:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		  break;
 800059a:	e09c      	b.n	80006d6 <main+0x44a>
	  case POINT3:
		  SSD1306_GotoXY(92, 53);
 800059c:	2135      	movs	r1, #53	; 0x35
 800059e:	205c      	movs	r0, #92	; 0x5c
 80005a0:	f000 fd88 	bl	80010b4 <SSD1306_GotoXY>
		  strncpy(string, " P3  ", 10);
 80005a4:	463b      	mov	r3, r7
 80005a6:	220a      	movs	r2, #10
 80005a8:	491f      	ldr	r1, [pc, #124]	; (8000628 <main+0x39c>)
 80005aa:	4618      	mov	r0, r3
 80005ac:	f004 f8d0 	bl	8004750 <strncpy>
		  SSD1306_Puts(string, &Font_7x10, SSD1306_COLOR_WHITE);
 80005b0:	463b      	mov	r3, r7
 80005b2:	2201      	movs	r2, #1
 80005b4:	4917      	ldr	r1, [pc, #92]	; (8000614 <main+0x388>)
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fe12 	bl	80011e0 <SSD1306_Puts>
		  SSD1306_UpdateScreen();;
 80005bc:	f000 fcd6 	bl	8000f6c <SSD1306_UpdateScreen>

		  if (editValues(&profile, &profile.temp3, &profile.time3, encoder.tapped, encoder.direction)){
 80005c0:	7d3d      	ldrb	r5, [r7, #20]
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	f107 021c 	add.w	r2, r7, #28
 80005c8:	f102 0408 	add.w	r4, r2, #8
 80005cc:	f107 021c 	add.w	r2, r7, #28
 80005d0:	f102 010a 	add.w	r1, r2, #10
 80005d4:	f107 001c 	add.w	r0, r7, #28
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	462b      	mov	r3, r5
 80005dc:	4622      	mov	r2, r4
 80005de:	f000 fb2f 	bl	8000c40 <editValues>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d178      	bne.n	80006da <main+0x44e>
		  }
		  else if (encoder.direction == 1){
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d103      	bne.n	80005f6 <main+0x36a>
			  state = POINT4;
 80005ee:	2303      	movs	r3, #3
 80005f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		  }
		  else if (encoder.direction == -1){
			  state = POINT2;
		  }
		  break;
 80005f4:	e071      	b.n	80006da <main+0x44e>
		  else if (encoder.direction == -1){
 80005f6:	69bb      	ldr	r3, [r7, #24]
 80005f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005fc:	d16d      	bne.n	80006da <main+0x44e>
			  state = POINT2;
 80005fe:	2301      	movs	r3, #1
 8000600:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		  break;
 8000604:	e069      	b.n	80006da <main+0x44e>
 8000606:	bf00      	nop
 8000608:	2000012c 	.word	0x2000012c
 800060c:	20000174 	.word	0x20000174
 8000610:	08005040 	.word	0x08005040
 8000614:	20000004 	.word	0x20000004
 8000618:	08005048 	.word	0x08005048
 800061c:	0800504c 	.word	0x0800504c
 8000620:	08005054 	.word	0x08005054
 8000624:	0800505c 	.word	0x0800505c
 8000628:	08005064 	.word	0x08005064
	  case POINT4:
		  SSD1306_GotoXY(92, 53);
 800062c:	2135      	movs	r1, #53	; 0x35
 800062e:	205c      	movs	r0, #92	; 0x5c
 8000630:	f000 fd40 	bl	80010b4 <SSD1306_GotoXY>
		  strncpy(string, " P4  ", 10);
 8000634:	463b      	mov	r3, r7
 8000636:	220a      	movs	r2, #10
 8000638:	492a      	ldr	r1, [pc, #168]	; (80006e4 <main+0x458>)
 800063a:	4618      	mov	r0, r3
 800063c:	f004 f888 	bl	8004750 <strncpy>
		  SSD1306_Puts(string, &Font_7x10, SSD1306_COLOR_WHITE);
 8000640:	463b      	mov	r3, r7
 8000642:	2201      	movs	r2, #1
 8000644:	4928      	ldr	r1, [pc, #160]	; (80006e8 <main+0x45c>)
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fdca 	bl	80011e0 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 800064c:	f000 fc8e 	bl	8000f6c <SSD1306_UpdateScreen>

		  if (editValues(&profile, &profile.temp4, &profile.time4, encoder.tapped, encoder.direction)){
 8000650:	7d3d      	ldrb	r5, [r7, #20]
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	f107 021c 	add.w	r2, r7, #28
 8000658:	f102 040c 	add.w	r4, r2, #12
 800065c:	f107 021c 	add.w	r2, r7, #28
 8000660:	f102 010e 	add.w	r1, r2, #14
 8000664:	f107 001c 	add.w	r0, r7, #28
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	462b      	mov	r3, r5
 800066c:	4622      	mov	r2, r4
 800066e:	f000 fae7 	bl	8000c40 <editValues>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d132      	bne.n	80006de <main+0x452>
		  }
		  else if (encoder.direction == 1){
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d11d      	bne.n	80006ba <main+0x42e>
			  state = START;
 800067e:	2304      	movs	r3, #4
 8000680:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			  // mark start button
			  SSD1306_GotoXY(92, 53);
 8000684:	2135      	movs	r1, #53	; 0x35
 8000686:	205c      	movs	r0, #92	; 0x5c
 8000688:	f000 fd14 	bl	80010b4 <SSD1306_GotoXY>
			  strncpy(string, "START", 10);
 800068c:	463b      	mov	r3, r7
 800068e:	220a      	movs	r2, #10
 8000690:	4916      	ldr	r1, [pc, #88]	; (80006ec <main+0x460>)
 8000692:	4618      	mov	r0, r3
 8000694:	f004 f85c 	bl	8004750 <strncpy>
			  SSD1306_DrawFilledRectangle(91, 51, 128, 64, SSD1306_COLOR_WHITE);
 8000698:	2301      	movs	r3, #1
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2340      	movs	r3, #64	; 0x40
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	2133      	movs	r1, #51	; 0x33
 80006a2:	205b      	movs	r0, #91	; 0x5b
 80006a4:	f000 ff26 	bl	80014f4 <SSD1306_DrawFilledRectangle>
			  SSD1306_Puts(string, &Font_7x10, SSD1306_COLOR_BLACK);
 80006a8:	463b      	mov	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	490e      	ldr	r1, [pc, #56]	; (80006e8 <main+0x45c>)
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 fd96 	bl	80011e0 <SSD1306_Puts>
			  SSD1306_UpdateScreen();
 80006b4:	f000 fc5a 	bl	8000f6c <SSD1306_UpdateScreen>
		  }
		  else if (encoder.direction == -1){
			  state = POINT3;
		  }
		  break;
 80006b8:	e011      	b.n	80006de <main+0x452>
		  else if (encoder.direction == -1){
 80006ba:	69bb      	ldr	r3, [r7, #24]
 80006bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c0:	d10d      	bne.n	80006de <main+0x452>
			  state = POINT3;
 80006c2:	2302      	movs	r3, #2
 80006c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		  break;
 80006c8:	e009      	b.n	80006de <main+0x452>
		  break;
 80006ca:	bf00      	nop
 80006cc:	e645      	b.n	800035a <main+0xce>
		  break;
 80006ce:	bf00      	nop
 80006d0:	e643      	b.n	800035a <main+0xce>
		  break;
 80006d2:	bf00      	nop
 80006d4:	e641      	b.n	800035a <main+0xce>
		  break;
 80006d6:	bf00      	nop
 80006d8:	e63f      	b.n	800035a <main+0xce>
		  break;
 80006da:	bf00      	nop
 80006dc:	e63d      	b.n	800035a <main+0xce>
		  break;
 80006de:	bf00      	nop
	  encoder = updateEncoder();
 80006e0:	e63b      	b.n	800035a <main+0xce>
 80006e2:	bf00      	nop
 80006e4:	0800506c 	.word	0x0800506c
 80006e8:	20000004 	.word	0x20000004
 80006ec:	08005040 	.word	0x08005040

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	; 0x50
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006fa:	2228      	movs	r2, #40	; 0x28
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fffe 	bl	8004700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000720:	2301      	movs	r3, #1
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000728:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072e:	2301      	movs	r3, #1
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800073c:	2300      	movs	r3, #0
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000744:	4618      	mov	r0, r3
 8000746:	f002 fc0d 	bl	8002f64 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000750:	f000 fb42 	bl	8000dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000764:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f002 fe79 	bl	8003468 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800077c:	f000 fb2c 	bl	8000dd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000780:	2302      	movs	r3, #2
 8000782:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	4618      	mov	r0, r3
 800078c:	f002 fff0 	bl	8003770 <HAL_RCCEx_PeriphCLKConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000796:	f000 fb1f 	bl	8000dd8 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	; 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_ADC1_Init+0x74>)
 80007b6:	4a19      	ldr	r2, [pc, #100]	; (800081c <MX_ADC1_Init+0x78>)
 80007b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_ADC1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_ADC1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_ADC1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_ADC1_Init+0x74>)
 80007ce:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80007d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_ADC1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_ADC1_Init+0x74>)
 80007dc:	2201      	movs	r2, #1
 80007de:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_ADC1_Init+0x74>)
 80007e2:	f001 f9bd 	bl	8001b60 <HAL_ADC_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007ec:	f000 faf4 	bl	8000dd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007f0:	2303      	movs	r3, #3
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_ADC1_Init+0x74>)
 8000802:	f001 fa85 	bl	8001d10 <HAL_ADC_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800080c:	f000 fae4 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200000a8 	.word	0x200000a8
 800081c:	40012400 	.word	0x40012400

08000820 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_I2C1_Init+0x50>)
 8000826:	4a13      	ldr	r2, [pc, #76]	; (8000874 <MX_I2C1_Init+0x54>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_I2C1_Init+0x50>)
 800082c:	4a12      	ldr	r2, [pc, #72]	; (8000878 <MX_I2C1_Init+0x58>)
 800082e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_I2C1_Init+0x50>)
 800083e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000842:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <MX_I2C1_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_I2C1_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_I2C1_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_I2C1_Init+0x50>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_I2C1_Init+0x50>)
 800085e:	f001 fe09 	bl	8002474 <HAL_I2C_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000868:	f000 fab6 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200000d8 	.word	0x200000d8
 8000874:	40005400 	.word	0x40005400
 8000878:	00061a80 	.word	0x00061a80

0800087c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08e      	sub	sp, #56	; 0x38
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000890:	f107 0320 	add.w	r3, r7, #32
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
 80008a8:	615a      	str	r2, [r3, #20]
 80008aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ac:	4b32      	ldr	r3, [pc, #200]	; (8000978 <MX_TIM2_Init+0xfc>)
 80008ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80008b4:	4b30      	ldr	r3, [pc, #192]	; (8000978 <MX_TIM2_Init+0xfc>)
 80008b6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80008ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008bc:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <MX_TIM2_Init+0xfc>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80008c2:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <MX_TIM2_Init+0xfc>)
 80008c4:	2263      	movs	r2, #99	; 0x63
 80008c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <MX_TIM2_Init+0xfc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ce:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <MX_TIM2_Init+0xfc>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d4:	4828      	ldr	r0, [pc, #160]	; (8000978 <MX_TIM2_Init+0xfc>)
 80008d6:	f003 f801 	bl	80038dc <HAL_TIM_Base_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008e0:	f000 fa7a 	bl	8000dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4821      	ldr	r0, [pc, #132]	; (8000978 <MX_TIM2_Init+0xfc>)
 80008f2:	f003 fb25 	bl	8003f40 <HAL_TIM_ConfigClockSource>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80008fc:	f000 fa6c 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000900:	481d      	ldr	r0, [pc, #116]	; (8000978 <MX_TIM2_Init+0xfc>)
 8000902:	f003 f83a 	bl	800397a <HAL_TIM_PWM_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800090c:	f000 fa64 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000918:	f107 0320 	add.w	r3, r7, #32
 800091c:	4619      	mov	r1, r3
 800091e:	4816      	ldr	r0, [pc, #88]	; (8000978 <MX_TIM2_Init+0xfc>)
 8000920:	f003 fe6c 	bl	80045fc <HAL_TIMEx_MasterConfigSynchronization>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800092a:	f000 fa55 	bl	8000dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800092e:	2360      	movs	r3, #96	; 0x60
 8000930:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2204      	movs	r2, #4
 8000942:	4619      	mov	r1, r3
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <MX_TIM2_Init+0xfc>)
 8000946:	f003 fa3d 	bl	8003dc4 <HAL_TIM_PWM_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000950:	f000 fa42 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2208      	movs	r2, #8
 8000958:	4619      	mov	r1, r3
 800095a:	4807      	ldr	r0, [pc, #28]	; (8000978 <MX_TIM2_Init+0xfc>)
 800095c:	f003 fa32 	bl	8003dc4 <HAL_TIM_PWM_ConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000966:	f000 fa37 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800096a:	4803      	ldr	r0, [pc, #12]	; (8000978 <MX_TIM2_Init+0xfc>)
 800096c:	f000 ffb8 	bl	80018e0 <HAL_TIM_MspPostInit>

}
 8000970:	bf00      	nop
 8000972:	3738      	adds	r7, #56	; 0x38
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2000012c 	.word	0x2000012c

0800097c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08c      	sub	sp, #48	; 0x30
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	2224      	movs	r2, #36	; 0x24
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f003 feb8 	bl	8004700 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000998:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <MX_TIM3_Init+0xa0>)
 800099a:	4a21      	ldr	r2, [pc, #132]	; (8000a20 <MX_TIM3_Init+0xa4>)
 800099c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800099e:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <MX_TIM3_Init+0xa0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a4:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MX_TIM3_Init+0xa0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <MX_TIM3_Init+0xa0>)
 80009ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MX_TIM3_Init+0xa0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_TIM3_Init+0xa0>)
 80009ba:	2280      	movs	r2, #128	; 0x80
 80009bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009be:	2303      	movs	r3, #3
 80009c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009c6:	2301      	movs	r3, #1
 80009c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80009ce:	230a      	movs	r3, #10
 80009d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009d6:	2301      	movs	r3, #1
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	4619      	mov	r1, r3
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <MX_TIM3_Init+0xa0>)
 80009ea:	f003 f8bb 	bl	8003b64 <HAL_TIM_Encoder_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80009f4:	f000 f9f0 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_TIM3_Init+0xa0>)
 8000a06:	f003 fdf9 	bl	80045fc <HAL_TIMEx_MasterConfigSynchronization>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a10:	f000 f9e2 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3730      	adds	r7, #48	; 0x30
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000174 	.word	0x20000174
 8000a20:	40000400 	.word	0x40000400

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_GPIO_Init+0x7c>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <MX_GPIO_Init+0x7c>)
 8000a3e:	f043 0320 	orr.w	r3, r3, #32
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_GPIO_Init+0x7c>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0320 	and.w	r3, r3, #32
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_GPIO_Init+0x7c>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <MX_GPIO_Init+0x7c>)
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_GPIO_Init+0x7c>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <MX_GPIO_Init+0x7c>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a0c      	ldr	r2, [pc, #48]	; (8000aa0 <MX_GPIO_Init+0x7c>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <MX_GPIO_Init+0x7c>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a80:	2320      	movs	r3, #32
 8000a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	4619      	mov	r1, r3
 8000a92:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_GPIO_Init+0x80>)
 8000a94:	f001 fb5a 	bl	800214c <HAL_GPIO_Init>

}
 8000a98:	bf00      	nop
 8000a9a:	3720      	adds	r7, #32
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010800 	.word	0x40010800

08000aa8 <rebuildScreen>:

/* USER CODE BEGIN 4 */
void rebuildScreen(Profile *profile){
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b08b      	sub	sp, #44	; 0x2c
 8000aac:	af02      	add	r7, sp, #8
 8000aae:	6078      	str	r0, [r7, #4]

	SSD1306_Clear();
 8000ab0:	f000 fd6d 	bl	800158e <SSD1306_Clear>
	// x axis between 0 and 540 seconds (9 minutes)
	// y axis between 0 and 250 degrees C
	// mapped temperature and time
	uint16_t mapTemp1 = 64-((64*profile->temp1)/250);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	885b      	ldrh	r3, [r3, #2]
 8000ab8:	019b      	lsls	r3, r3, #6
 8000aba:	4a5f      	ldr	r2, [pc, #380]	; (8000c38 <rebuildScreen+0x190>)
 8000abc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac0:	1112      	asrs	r2, r2, #4
 8000ac2:	17db      	asrs	r3, r3, #31
 8000ac4:	1a9b      	subs	r3, r3, r2
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	3340      	adds	r3, #64	; 0x40
 8000aca:	83fb      	strh	r3, [r7, #30]
	uint16_t mapTemp2 = 64-((64*profile->temp2)/250);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	88db      	ldrh	r3, [r3, #6]
 8000ad0:	019b      	lsls	r3, r3, #6
 8000ad2:	4a59      	ldr	r2, [pc, #356]	; (8000c38 <rebuildScreen+0x190>)
 8000ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad8:	1112      	asrs	r2, r2, #4
 8000ada:	17db      	asrs	r3, r3, #31
 8000adc:	1a9b      	subs	r3, r3, r2
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	3340      	adds	r3, #64	; 0x40
 8000ae2:	83bb      	strh	r3, [r7, #28]
	uint16_t mapTemp3 = 64-((64*profile->temp3)/250);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	895b      	ldrh	r3, [r3, #10]
 8000ae8:	019b      	lsls	r3, r3, #6
 8000aea:	4a53      	ldr	r2, [pc, #332]	; (8000c38 <rebuildScreen+0x190>)
 8000aec:	fb82 1203 	smull	r1, r2, r2, r3
 8000af0:	1112      	asrs	r2, r2, #4
 8000af2:	17db      	asrs	r3, r3, #31
 8000af4:	1a9b      	subs	r3, r3, r2
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	3340      	adds	r3, #64	; 0x40
 8000afa:	837b      	strh	r3, [r7, #26]
	uint16_t mapTemp4 = 64-((64*profile->temp4)/250);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	89db      	ldrh	r3, [r3, #14]
 8000b00:	019b      	lsls	r3, r3, #6
 8000b02:	4a4d      	ldr	r2, [pc, #308]	; (8000c38 <rebuildScreen+0x190>)
 8000b04:	fb82 1203 	smull	r1, r2, r2, r3
 8000b08:	1112      	asrs	r2, r2, #4
 8000b0a:	17db      	asrs	r3, r3, #31
 8000b0c:	1a9b      	subs	r3, r3, r2
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	3340      	adds	r3, #64	; 0x40
 8000b12:	833b      	strh	r3, [r7, #24]
	uint16_t mapTime1 = (128*profile->time1)/540;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	01db      	lsls	r3, r3, #7
 8000b1a:	4a48      	ldr	r2, [pc, #288]	; (8000c3c <rebuildScreen+0x194>)
 8000b1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b20:	441a      	add	r2, r3
 8000b22:	1252      	asrs	r2, r2, #9
 8000b24:	17db      	asrs	r3, r3, #31
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	82fb      	strh	r3, [r7, #22]
	uint16_t mapTime2 = (128*profile->time2)/540;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	889b      	ldrh	r3, [r3, #4]
 8000b2e:	01db      	lsls	r3, r3, #7
 8000b30:	4a42      	ldr	r2, [pc, #264]	; (8000c3c <rebuildScreen+0x194>)
 8000b32:	fb82 1203 	smull	r1, r2, r2, r3
 8000b36:	441a      	add	r2, r3
 8000b38:	1252      	asrs	r2, r2, #9
 8000b3a:	17db      	asrs	r3, r3, #31
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	82bb      	strh	r3, [r7, #20]
	uint16_t mapTime3 = (128*profile->time3)/540;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	891b      	ldrh	r3, [r3, #8]
 8000b44:	01db      	lsls	r3, r3, #7
 8000b46:	4a3d      	ldr	r2, [pc, #244]	; (8000c3c <rebuildScreen+0x194>)
 8000b48:	fb82 1203 	smull	r1, r2, r2, r3
 8000b4c:	441a      	add	r2, r3
 8000b4e:	1252      	asrs	r2, r2, #9
 8000b50:	17db      	asrs	r3, r3, #31
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	827b      	strh	r3, [r7, #18]
	uint16_t mapTime4 = (128*profile->time4)/540;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	899b      	ldrh	r3, [r3, #12]
 8000b5a:	01db      	lsls	r3, r3, #7
 8000b5c:	4a37      	ldr	r2, [pc, #220]	; (8000c3c <rebuildScreen+0x194>)
 8000b5e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b62:	441a      	add	r2, r3
 8000b64:	1252      	asrs	r2, r2, #9
 8000b66:	17db      	asrs	r3, r3, #31
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	823b      	strh	r3, [r7, #16]
	uint16_t finTemp = mapTime4/4;
 8000b6c:	8a3b      	ldrh	r3, [r7, #16]
 8000b6e:	089b      	lsrs	r3, r3, #2
 8000b70:	81fb      	strh	r3, [r7, #14]

	// reflow profile lines
	SSD1306_DrawLine(0, 59, mapTime1, mapTemp1, SSD1306_COLOR_WHITE);
 8000b72:	8bfb      	ldrh	r3, [r7, #30]
 8000b74:	8afa      	ldrh	r2, [r7, #22]
 8000b76:	2101      	movs	r1, #1
 8000b78:	9100      	str	r1, [sp, #0]
 8000b7a:	213b      	movs	r1, #59	; 0x3b
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f000 fb54 	bl	800122a <SSD1306_DrawLine>
	SSD1306_DrawLine(mapTime1, mapTemp1, mapTime2, mapTemp2, SSD1306_COLOR_WHITE);
 8000b82:	8bbb      	ldrh	r3, [r7, #28]
 8000b84:	8aba      	ldrh	r2, [r7, #20]
 8000b86:	8bf9      	ldrh	r1, [r7, #30]
 8000b88:	8af8      	ldrh	r0, [r7, #22]
 8000b8a:	2401      	movs	r4, #1
 8000b8c:	9400      	str	r4, [sp, #0]
 8000b8e:	f000 fb4c 	bl	800122a <SSD1306_DrawLine>
	SSD1306_DrawLine(mapTime2, mapTemp2, mapTime3, mapTemp3, SSD1306_COLOR_WHITE);
 8000b92:	8b7b      	ldrh	r3, [r7, #26]
 8000b94:	8a7a      	ldrh	r2, [r7, #18]
 8000b96:	8bb9      	ldrh	r1, [r7, #28]
 8000b98:	8ab8      	ldrh	r0, [r7, #20]
 8000b9a:	2401      	movs	r4, #1
 8000b9c:	9400      	str	r4, [sp, #0]
 8000b9e:	f000 fb44 	bl	800122a <SSD1306_DrawLine>
	SSD1306_DrawLine(mapTime3, mapTemp3, mapTime4, mapTemp4, SSD1306_COLOR_WHITE);
 8000ba2:	8b3b      	ldrh	r3, [r7, #24]
 8000ba4:	8a3a      	ldrh	r2, [r7, #16]
 8000ba6:	8b79      	ldrh	r1, [r7, #26]
 8000ba8:	8a78      	ldrh	r0, [r7, #18]
 8000baa:	2401      	movs	r4, #1
 8000bac:	9400      	str	r4, [sp, #0]
 8000bae:	f000 fb3c 	bl	800122a <SSD1306_DrawLine>
	SSD1306_DrawLine(mapTime4, mapTemp4, 128, finTemp, SSD1306_COLOR_WHITE);
 8000bb2:	89fb      	ldrh	r3, [r7, #14]
 8000bb4:	8b39      	ldrh	r1, [r7, #24]
 8000bb6:	8a38      	ldrh	r0, [r7, #16]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	9200      	str	r2, [sp, #0]
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	f000 fb34 	bl	800122a <SSD1306_DrawLine>

	// axis lines
	SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	2340      	movs	r3, #64	; 0x40
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f000 fb2c 	bl	800122a <SSD1306_DrawLine>
	SSD1306_DrawLine(0, 128, 128, 128, SSD1306_COLOR_WHITE);
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	2280      	movs	r2, #128	; 0x80
 8000bda:	2180      	movs	r1, #128	; 0x80
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f000 fb24 	bl	800122a <SSD1306_DrawLine>

	// unmark start button
	SSD1306_GotoXY(92, 53);
 8000be2:	2135      	movs	r1, #53	; 0x35
 8000be4:	205c      	movs	r0, #92	; 0x5c
 8000be6:	f000 fa65 	bl	80010b4 <SSD1306_GotoXY>
	SSD1306_DrawLine(92, 52, 127, 52, SSD1306_COLOR_BLACK);
 8000bea:	2300      	movs	r3, #0
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2334      	movs	r3, #52	; 0x34
 8000bf0:	227f      	movs	r2, #127	; 0x7f
 8000bf2:	2134      	movs	r1, #52	; 0x34
 8000bf4:	205c      	movs	r0, #92	; 0x5c
 8000bf6:	f000 fb18 	bl	800122a <SSD1306_DrawLine>
	SSD1306_DrawRectangle(91, 51, 128, 64, SSD1306_COLOR_WHITE);
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	2340      	movs	r3, #64	; 0x40
 8000c00:	2280      	movs	r2, #128	; 0x80
 8000c02:	2133      	movs	r1, #51	; 0x33
 8000c04:	205b      	movs	r0, #91	; 0x5b
 8000c06:	f000 fc0b 	bl	8001420 <SSD1306_DrawRectangle>

	SSD1306_DrawRectangle(47, 51, 128, 64, SSD1306_COLOR_WHITE);
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	2280      	movs	r2, #128	; 0x80
 8000c12:	2133      	movs	r1, #51	; 0x33
 8000c14:	202f      	movs	r0, #47	; 0x2f
 8000c16:	f000 fc03 	bl	8001420 <SSD1306_DrawRectangle>
	SSD1306_DrawRectangle(69, 51, 128, 64, SSD1306_COLOR_WHITE);
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	2340      	movs	r3, #64	; 0x40
 8000c20:	2280      	movs	r2, #128	; 0x80
 8000c22:	2133      	movs	r1, #51	; 0x33
 8000c24:	2045      	movs	r0, #69	; 0x45
 8000c26:	f000 fbfb 	bl	8001420 <SSD1306_DrawRectangle>
	//SSD1306_DrawLine(0, 0, profile->time1, profile->temp1, SSD1306_COLOR_WHITE);
	SSD1306_UpdateScreen();
 8000c2a:	f000 f99f 	bl	8000f6c <SSD1306_UpdateScreen>
};
 8000c2e:	bf00      	nop
 8000c30:	3724      	adds	r7, #36	; 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd90      	pop	{r4, r7, pc}
 8000c36:	bf00      	nop
 8000c38:	10624dd3 	.word	0x10624dd3
 8000c3c:	f2b9d649 	.word	0xf2b9d649

08000c40 <editValues>:

bool editValues(Profile *profile, uint16_t *temp, uint16_t *time, bool button, int direction){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	70fb      	strb	r3, [r7, #3]
	static uint8_t tapCount = 0;
	static char string[10];

	if (button){
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d02f      	beq.n	8000cb4 <editValues+0x74>
		tapCount++;
 8000c54:	4b5c      	ldr	r3, [pc, #368]	; (8000dc8 <editValues+0x188>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	4b5a      	ldr	r3, [pc, #360]	; (8000dc8 <editValues+0x188>)
 8000c5e:	701a      	strb	r2, [r3, #0]
		SSD1306_GotoXY(48,53);
 8000c60:	2135      	movs	r1, #53	; 0x35
 8000c62:	2030      	movs	r0, #48	; 0x30
 8000c64:	f000 fa26 	bl	80010b4 <SSD1306_GotoXY>
		SSD1306_DrawLine(49, 52, 68, 52, SSD1306_COLOR_BLACK);
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2334      	movs	r3, #52	; 0x34
 8000c6e:	2244      	movs	r2, #68	; 0x44
 8000c70:	2134      	movs	r1, #52	; 0x34
 8000c72:	2031      	movs	r0, #49	; 0x31
 8000c74:	f000 fad9 	bl	800122a <SSD1306_DrawLine>
		sprintf(string, "%03u", *time);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4953      	ldr	r1, [pc, #332]	; (8000dcc <editValues+0x18c>)
 8000c80:	4853      	ldr	r0, [pc, #332]	; (8000dd0 <editValues+0x190>)
 8000c82:	f003 fd45 	bl	8004710 <siprintf>
		SSD1306_Puts(string, &Font_7x10, 1);
 8000c86:	2201      	movs	r2, #1
 8000c88:	4952      	ldr	r1, [pc, #328]	; (8000dd4 <editValues+0x194>)
 8000c8a:	4851      	ldr	r0, [pc, #324]	; (8000dd0 <editValues+0x190>)
 8000c8c:	f000 faa8 	bl	80011e0 <SSD1306_Puts>
		SSD1306_GotoXY(70,53);
 8000c90:	2135      	movs	r1, #53	; 0x35
 8000c92:	2046      	movs	r0, #70	; 0x46
 8000c94:	f000 fa0e 	bl	80010b4 <SSD1306_GotoXY>
		sprintf(string, "%03u", *temp);
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	494b      	ldr	r1, [pc, #300]	; (8000dcc <editValues+0x18c>)
 8000ca0:	484b      	ldr	r0, [pc, #300]	; (8000dd0 <editValues+0x190>)
 8000ca2:	f003 fd35 	bl	8004710 <siprintf>
		SSD1306_Puts(string, &Font_7x10, 1);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	494a      	ldr	r1, [pc, #296]	; (8000dd4 <editValues+0x194>)
 8000caa:	4849      	ldr	r0, [pc, #292]	; (8000dd0 <editValues+0x190>)
 8000cac:	f000 fa98 	bl	80011e0 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000cb0:	f000 f95c 	bl	8000f6c <SSD1306_UpdateScreen>
	}
	if (tapCount == 0){
 8000cb4:	4b44      	ldr	r3, [pc, #272]	; (8000dc8 <editValues+0x188>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d122      	bne.n	8000d02 <editValues+0xc2>
		SSD1306_GotoXY(48,53);
 8000cbc:	2135      	movs	r1, #53	; 0x35
 8000cbe:	2030      	movs	r0, #48	; 0x30
 8000cc0:	f000 f9f8 	bl	80010b4 <SSD1306_GotoXY>
		sprintf(string, "%03u", *time);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4940      	ldr	r1, [pc, #256]	; (8000dcc <editValues+0x18c>)
 8000ccc:	4840      	ldr	r0, [pc, #256]	; (8000dd0 <editValues+0x190>)
 8000cce:	f003 fd1f 	bl	8004710 <siprintf>
		SSD1306_Puts(string, &Font_7x10, 1);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	493f      	ldr	r1, [pc, #252]	; (8000dd4 <editValues+0x194>)
 8000cd6:	483e      	ldr	r0, [pc, #248]	; (8000dd0 <editValues+0x190>)
 8000cd8:	f000 fa82 	bl	80011e0 <SSD1306_Puts>
		SSD1306_GotoXY(70,53);
 8000cdc:	2135      	movs	r1, #53	; 0x35
 8000cde:	2046      	movs	r0, #70	; 0x46
 8000ce0:	f000 f9e8 	bl	80010b4 <SSD1306_GotoXY>
		sprintf(string, "%03u", *temp);
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4938      	ldr	r1, [pc, #224]	; (8000dcc <editValues+0x18c>)
 8000cec:	4838      	ldr	r0, [pc, #224]	; (8000dd0 <editValues+0x190>)
 8000cee:	f003 fd0f 	bl	8004710 <siprintf>
		SSD1306_Puts(string, &Font_7x10, 1);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4937      	ldr	r1, [pc, #220]	; (8000dd4 <editValues+0x194>)
 8000cf6:	4836      	ldr	r0, [pc, #216]	; (8000dd0 <editValues+0x190>)
 8000cf8:	f000 fa72 	bl	80011e0 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000cfc:	f000 f936 	bl	8000f6c <SSD1306_UpdateScreen>
 8000d00:	e057      	b.n	8000db2 <editValues+0x172>
	}
	else if (tapCount == 1){
 8000d02:	4b31      	ldr	r3, [pc, #196]	; (8000dc8 <editValues+0x188>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d122      	bne.n	8000d50 <editValues+0x110>
		*time += direction;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	881a      	ldrh	r2, [r3, #0]
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4413      	add	r3, r2
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	801a      	strh	r2, [r3, #0]
		SSD1306_DrawFilledRectangle(47, 51, 21, 64, SSD1306_COLOR_WHITE);
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	2340      	movs	r3, #64	; 0x40
 8000d20:	2215      	movs	r2, #21
 8000d22:	2133      	movs	r1, #51	; 0x33
 8000d24:	202f      	movs	r0, #47	; 0x2f
 8000d26:	f000 fbe5 	bl	80014f4 <SSD1306_DrawFilledRectangle>
		SSD1306_GotoXY(48,53);
 8000d2a:	2135      	movs	r1, #53	; 0x35
 8000d2c:	2030      	movs	r0, #48	; 0x30
 8000d2e:	f000 f9c1 	bl	80010b4 <SSD1306_GotoXY>
		sprintf(string, "%03u", *time);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	4924      	ldr	r1, [pc, #144]	; (8000dcc <editValues+0x18c>)
 8000d3a:	4825      	ldr	r0, [pc, #148]	; (8000dd0 <editValues+0x190>)
 8000d3c:	f003 fce8 	bl	8004710 <siprintf>
		SSD1306_Puts(string, &Font_7x10, SSD1306_COLOR_BLACK);
 8000d40:	2200      	movs	r2, #0
 8000d42:	4924      	ldr	r1, [pc, #144]	; (8000dd4 <editValues+0x194>)
 8000d44:	4822      	ldr	r0, [pc, #136]	; (8000dd0 <editValues+0x190>)
 8000d46:	f000 fa4b 	bl	80011e0 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000d4a:	f000 f90f 	bl	8000f6c <SSD1306_UpdateScreen>
 8000d4e:	e030      	b.n	8000db2 <editValues+0x172>
	}
	else if (tapCount == 2){
 8000d50:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <editValues+0x188>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d122      	bne.n	8000d9e <editValues+0x15e>
		*temp += direction;
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	881a      	ldrh	r2, [r3, #0]
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	4413      	add	r3, r2
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	801a      	strh	r2, [r3, #0]
		SSD1306_DrawFilledRectangle(69, 51, 21, 64, SSD1306_COLOR_WHITE);
 8000d68:	2301      	movs	r3, #1
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	2340      	movs	r3, #64	; 0x40
 8000d6e:	2215      	movs	r2, #21
 8000d70:	2133      	movs	r1, #51	; 0x33
 8000d72:	2045      	movs	r0, #69	; 0x45
 8000d74:	f000 fbbe 	bl	80014f4 <SSD1306_DrawFilledRectangle>
		SSD1306_GotoXY(70,53);
 8000d78:	2135      	movs	r1, #53	; 0x35
 8000d7a:	2046      	movs	r0, #70	; 0x46
 8000d7c:	f000 f99a 	bl	80010b4 <SSD1306_GotoXY>
		sprintf(string, "%03u", *temp);
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4911      	ldr	r1, [pc, #68]	; (8000dcc <editValues+0x18c>)
 8000d88:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <editValues+0x190>)
 8000d8a:	f003 fcc1 	bl	8004710 <siprintf>
		SSD1306_Puts(string, &Font_7x10, SSD1306_COLOR_BLACK);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4910      	ldr	r1, [pc, #64]	; (8000dd4 <editValues+0x194>)
 8000d92:	480f      	ldr	r0, [pc, #60]	; (8000dd0 <editValues+0x190>)
 8000d94:	f000 fa24 	bl	80011e0 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000d98:	f000 f8e8 	bl	8000f6c <SSD1306_UpdateScreen>
 8000d9c:	e009      	b.n	8000db2 <editValues+0x172>
	}
	else if (tapCount > 2){
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <editValues+0x188>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d905      	bls.n	8000db2 <editValues+0x172>
		tapCount = 0;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <editValues+0x188>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]
		rebuildScreen(profile);
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f7ff fe7b 	bl	8000aa8 <rebuildScreen>
	}
	// exit condition
	if (tapCount == 0) return false;
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <editValues+0x188>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <editValues+0x17e>
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <editValues+0x180>
	else return true;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200001bc 	.word	0x200001bc
 8000dcc:	08005074 	.word	0x08005074
 8000dd0:	200001c0 	.word	0x200001c0
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ddc:	b672      	cpsid	i
}
 8000dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <Error_Handler+0x8>
	...

08000de4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000dea:	f000 fbd9 	bl	80015a0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000dee:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000df2:	2201      	movs	r2, #1
 8000df4:	2178      	movs	r1, #120	; 0x78
 8000df6:	485b      	ldr	r0, [pc, #364]	; (8000f64 <SSD1306_Init+0x180>)
 8000df8:	f001 fd7e 	bl	80028f8 <HAL_I2C_IsDeviceReady>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e0a9      	b.n	8000f5a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000e06:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000e0a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e0c:	e002      	b.n	8000e14 <SSD1306_Init+0x30>
		p--;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1f9      	bne.n	8000e0e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000e1a:	22ae      	movs	r2, #174	; 0xae
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2078      	movs	r0, #120	; 0x78
 8000e20:	f000 fc38 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000e24:	2220      	movs	r2, #32
 8000e26:	2100      	movs	r1, #0
 8000e28:	2078      	movs	r0, #120	; 0x78
 8000e2a:	f000 fc33 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000e2e:	2210      	movs	r2, #16
 8000e30:	2100      	movs	r1, #0
 8000e32:	2078      	movs	r0, #120	; 0x78
 8000e34:	f000 fc2e 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e38:	22b0      	movs	r2, #176	; 0xb0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2078      	movs	r0, #120	; 0x78
 8000e3e:	f000 fc29 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000e42:	22c8      	movs	r2, #200	; 0xc8
 8000e44:	2100      	movs	r1, #0
 8000e46:	2078      	movs	r0, #120	; 0x78
 8000e48:	f000 fc24 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2078      	movs	r0, #120	; 0x78
 8000e52:	f000 fc1f 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000e56:	2210      	movs	r2, #16
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2078      	movs	r0, #120	; 0x78
 8000e5c:	f000 fc1a 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000e60:	2240      	movs	r2, #64	; 0x40
 8000e62:	2100      	movs	r1, #0
 8000e64:	2078      	movs	r0, #120	; 0x78
 8000e66:	f000 fc15 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000e6a:	2281      	movs	r2, #129	; 0x81
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2078      	movs	r0, #120	; 0x78
 8000e70:	f000 fc10 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000e74:	22ff      	movs	r2, #255	; 0xff
 8000e76:	2100      	movs	r1, #0
 8000e78:	2078      	movs	r0, #120	; 0x78
 8000e7a:	f000 fc0b 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000e7e:	22a1      	movs	r2, #161	; 0xa1
 8000e80:	2100      	movs	r1, #0
 8000e82:	2078      	movs	r0, #120	; 0x78
 8000e84:	f000 fc06 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000e88:	22a6      	movs	r2, #166	; 0xa6
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2078      	movs	r0, #120	; 0x78
 8000e8e:	f000 fc01 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000e92:	22a8      	movs	r2, #168	; 0xa8
 8000e94:	2100      	movs	r1, #0
 8000e96:	2078      	movs	r0, #120	; 0x78
 8000e98:	f000 fbfc 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000e9c:	223f      	movs	r2, #63	; 0x3f
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2078      	movs	r0, #120	; 0x78
 8000ea2:	f000 fbf7 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ea6:	22a4      	movs	r2, #164	; 0xa4
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2078      	movs	r0, #120	; 0x78
 8000eac:	f000 fbf2 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000eb0:	22d3      	movs	r2, #211	; 0xd3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2078      	movs	r0, #120	; 0x78
 8000eb6:	f000 fbed 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2078      	movs	r0, #120	; 0x78
 8000ec0:	f000 fbe8 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ec4:	22d5      	movs	r2, #213	; 0xd5
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2078      	movs	r0, #120	; 0x78
 8000eca:	f000 fbe3 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000ece:	22f0      	movs	r2, #240	; 0xf0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2078      	movs	r0, #120	; 0x78
 8000ed4:	f000 fbde 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000ed8:	22d9      	movs	r2, #217	; 0xd9
 8000eda:	2100      	movs	r1, #0
 8000edc:	2078      	movs	r0, #120	; 0x78
 8000ede:	f000 fbd9 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000ee2:	2222      	movs	r2, #34	; 0x22
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2078      	movs	r0, #120	; 0x78
 8000ee8:	f000 fbd4 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000eec:	22da      	movs	r2, #218	; 0xda
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2078      	movs	r0, #120	; 0x78
 8000ef2:	f000 fbcf 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000ef6:	2212      	movs	r2, #18
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2078      	movs	r0, #120	; 0x78
 8000efc:	f000 fbca 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000f00:	22db      	movs	r2, #219	; 0xdb
 8000f02:	2100      	movs	r1, #0
 8000f04:	2078      	movs	r0, #120	; 0x78
 8000f06:	f000 fbc5 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000f0a:	2220      	movs	r2, #32
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2078      	movs	r0, #120	; 0x78
 8000f10:	f000 fbc0 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000f14:	228d      	movs	r2, #141	; 0x8d
 8000f16:	2100      	movs	r1, #0
 8000f18:	2078      	movs	r0, #120	; 0x78
 8000f1a:	f000 fbbb 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000f1e:	2214      	movs	r2, #20
 8000f20:	2100      	movs	r1, #0
 8000f22:	2078      	movs	r0, #120	; 0x78
 8000f24:	f000 fbb6 	bl	8001694 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000f28:	22af      	movs	r2, #175	; 0xaf
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2078      	movs	r0, #120	; 0x78
 8000f2e:	f000 fbb1 	bl	8001694 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000f32:	222e      	movs	r2, #46	; 0x2e
 8000f34:	2100      	movs	r1, #0
 8000f36:	2078      	movs	r0, #120	; 0x78
 8000f38:	f000 fbac 	bl	8001694 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f000 f843 	bl	8000fc8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000f42:	f000 f813 	bl	8000f6c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <SSD1306_Init+0x184>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <SSD1306_Init+0x184>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SSD1306_Init+0x184>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000f58:	2301      	movs	r3, #1
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200000d8 	.word	0x200000d8
 8000f68:	200005cc 	.word	0x200005cc

08000f6c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000f72:	2300      	movs	r3, #0
 8000f74:	71fb      	strb	r3, [r7, #7]
 8000f76:	e01d      	b.n	8000fb4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	3b50      	subs	r3, #80	; 0x50
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2100      	movs	r1, #0
 8000f82:	2078      	movs	r0, #120	; 0x78
 8000f84:	f000 fb86 	bl	8001694 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2078      	movs	r0, #120	; 0x78
 8000f8e:	f000 fb81 	bl	8001694 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000f92:	2210      	movs	r2, #16
 8000f94:	2100      	movs	r1, #0
 8000f96:	2078      	movs	r0, #120	; 0x78
 8000f98:	f000 fb7c 	bl	8001694 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	01db      	lsls	r3, r3, #7
 8000fa0:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <SSD1306_UpdateScreen+0x58>)
 8000fa2:	441a      	add	r2, r3
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	2140      	movs	r1, #64	; 0x40
 8000fa8:	2078      	movs	r0, #120	; 0x78
 8000faa:	f000 fb0d 	bl	80015c8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	2b07      	cmp	r3, #7
 8000fb8:	d9de      	bls.n	8000f78 <SSD1306_UpdateScreen+0xc>
	}
}
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200001cc 	.word	0x200001cc

08000fc8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <SSD1306_Fill+0x14>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e000      	b.n	8000fde <SSD1306_Fill+0x16>
 8000fdc:	23ff      	movs	r3, #255	; 0xff
 8000fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <SSD1306_Fill+0x2c>)
 8000fe6:	f003 fb8b 	bl	8004700 <memset>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200001cc 	.word	0x200001cc

08000ff8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]
 8001002:	460b      	mov	r3, r1
 8001004:	80bb      	strh	r3, [r7, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	70fb      	strb	r3, [r7, #3]
	if (
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	2b7f      	cmp	r3, #127	; 0x7f
 800100e:	d848      	bhi.n	80010a2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001010:	88bb      	ldrh	r3, [r7, #4]
 8001012:	2b3f      	cmp	r3, #63	; 0x3f
 8001014:	d845      	bhi.n	80010a2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <SSD1306_DrawPixel+0xb4>)
 8001018:	791b      	ldrb	r3, [r3, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d006      	beq.n	800102c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	2b00      	cmp	r3, #0
 8001022:	bf0c      	ite	eq
 8001024:	2301      	moveq	r3, #1
 8001026:	2300      	movne	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d11a      	bne.n	8001068 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001032:	88fa      	ldrh	r2, [r7, #6]
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	08db      	lsrs	r3, r3, #3
 8001038:	b298      	uxth	r0, r3
 800103a:	4603      	mov	r3, r0
 800103c:	01db      	lsls	r3, r3, #7
 800103e:	4413      	add	r3, r2
 8001040:	4a1b      	ldr	r2, [pc, #108]	; (80010b0 <SSD1306_DrawPixel+0xb8>)
 8001042:	5cd3      	ldrb	r3, [r2, r3]
 8001044:	b25a      	sxtb	r2, r3
 8001046:	88bb      	ldrh	r3, [r7, #4]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	2101      	movs	r1, #1
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	b25b      	sxtb	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b259      	sxtb	r1, r3
 8001058:	88fa      	ldrh	r2, [r7, #6]
 800105a:	4603      	mov	r3, r0
 800105c:	01db      	lsls	r3, r3, #7
 800105e:	4413      	add	r3, r2
 8001060:	b2c9      	uxtb	r1, r1
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <SSD1306_DrawPixel+0xb8>)
 8001064:	54d1      	strb	r1, [r2, r3]
 8001066:	e01d      	b.n	80010a4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001068:	88fa      	ldrh	r2, [r7, #6]
 800106a:	88bb      	ldrh	r3, [r7, #4]
 800106c:	08db      	lsrs	r3, r3, #3
 800106e:	b298      	uxth	r0, r3
 8001070:	4603      	mov	r3, r0
 8001072:	01db      	lsls	r3, r3, #7
 8001074:	4413      	add	r3, r2
 8001076:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <SSD1306_DrawPixel+0xb8>)
 8001078:	5cd3      	ldrb	r3, [r2, r3]
 800107a:	b25a      	sxtb	r2, r3
 800107c:	88bb      	ldrh	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	2101      	movs	r1, #1
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	b25b      	sxtb	r3, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	b25b      	sxtb	r3, r3
 800108e:	4013      	ands	r3, r2
 8001090:	b259      	sxtb	r1, r3
 8001092:	88fa      	ldrh	r2, [r7, #6]
 8001094:	4603      	mov	r3, r0
 8001096:	01db      	lsls	r3, r3, #7
 8001098:	4413      	add	r3, r2
 800109a:	b2c9      	uxtb	r1, r1
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <SSD1306_DrawPixel+0xb8>)
 800109e:	54d1      	strb	r1, [r2, r3]
 80010a0:	e000      	b.n	80010a4 <SSD1306_DrawPixel+0xac>
		return;
 80010a2:	bf00      	nop
	}
}
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	200005cc 	.word	0x200005cc
 80010b0:	200001cc 	.word	0x200001cc

080010b4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	460a      	mov	r2, r1
 80010be:	80fb      	strh	r3, [r7, #6]
 80010c0:	4613      	mov	r3, r2
 80010c2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80010c4:	4a05      	ldr	r2, [pc, #20]	; (80010dc <SSD1306_GotoXY+0x28>)
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80010ca:	4a04      	ldr	r2, [pc, #16]	; (80010dc <SSD1306_GotoXY+0x28>)
 80010cc:	88bb      	ldrh	r3, [r7, #4]
 80010ce:	8053      	strh	r3, [r2, #2]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	200005cc 	.word	0x200005cc

080010e0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80010f0:	4b3a      	ldr	r3, [pc, #232]	; (80011dc <SSD1306_Putc+0xfc>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
	if (
 80010fc:	2b7f      	cmp	r3, #127	; 0x7f
 80010fe:	dc07      	bgt.n	8001110 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001100:	4b36      	ldr	r3, [pc, #216]	; (80011dc <SSD1306_Putc+0xfc>)
 8001102:	885b      	ldrh	r3, [r3, #2]
 8001104:	461a      	mov	r2, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	785b      	ldrb	r3, [r3, #1]
 800110a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800110c:	2b3f      	cmp	r3, #63	; 0x3f
 800110e:	dd01      	ble.n	8001114 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001110:	2300      	movs	r3, #0
 8001112:	e05e      	b.n	80011d2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	e04b      	b.n	80011b2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	3b20      	subs	r3, #32
 8001122:	6839      	ldr	r1, [r7, #0]
 8001124:	7849      	ldrb	r1, [r1, #1]
 8001126:	fb01 f303 	mul.w	r3, r1, r3
 800112a:	4619      	mov	r1, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	440b      	add	r3, r1
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	e030      	b.n	80011a0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d010      	beq.n	8001170 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800114e:	4b23      	ldr	r3, [pc, #140]	; (80011dc <SSD1306_Putc+0xfc>)
 8001150:	881a      	ldrh	r2, [r3, #0]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	b29b      	uxth	r3, r3
 8001156:	4413      	add	r3, r2
 8001158:	b298      	uxth	r0, r3
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <SSD1306_Putc+0xfc>)
 800115c:	885a      	ldrh	r2, [r3, #2]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	b29b      	uxth	r3, r3
 8001162:	4413      	add	r3, r2
 8001164:	b29b      	uxth	r3, r3
 8001166:	79ba      	ldrb	r2, [r7, #6]
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff ff45 	bl	8000ff8 <SSD1306_DrawPixel>
 800116e:	e014      	b.n	800119a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <SSD1306_Putc+0xfc>)
 8001172:	881a      	ldrh	r2, [r3, #0]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4413      	add	r3, r2
 800117a:	b298      	uxth	r0, r3
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <SSD1306_Putc+0xfc>)
 800117e:	885a      	ldrh	r2, [r3, #2]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	b29b      	uxth	r3, r3
 8001184:	4413      	add	r3, r2
 8001186:	b299      	uxth	r1, r3
 8001188:	79bb      	ldrb	r3, [r7, #6]
 800118a:	2b00      	cmp	r3, #0
 800118c:	bf0c      	ite	eq
 800118e:	2301      	moveq	r3, #1
 8001190:	2300      	movne	r3, #0
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	f7ff ff2f 	bl	8000ff8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	3301      	adds	r3, #1
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d3c8      	bcc.n	800113e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3301      	adds	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	785b      	ldrb	r3, [r3, #1]
 80011b6:	461a      	mov	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d3ad      	bcc.n	800111a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <SSD1306_Putc+0xfc>)
 80011c0:	881a      	ldrh	r2, [r3, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	4413      	add	r3, r2
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <SSD1306_Putc+0xfc>)
 80011ce:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200005cc 	.word	0x200005cc

080011e0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	4613      	mov	r3, r2
 80011ec:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80011ee:	e012      	b.n	8001216 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	79fa      	ldrb	r2, [r7, #7]
 80011f6:	68b9      	ldr	r1, [r7, #8]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff71 	bl	80010e0 <SSD1306_Putc>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d002      	beq.n	8001210 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	e008      	b.n	8001222 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3301      	adds	r3, #1
 8001214:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1e8      	bne.n	80011f0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	781b      	ldrb	r3, [r3, #0]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800122a:	b590      	push	{r4, r7, lr}
 800122c:	b087      	sub	sp, #28
 800122e:	af00      	add	r7, sp, #0
 8001230:	4604      	mov	r4, r0
 8001232:	4608      	mov	r0, r1
 8001234:	4611      	mov	r1, r2
 8001236:	461a      	mov	r2, r3
 8001238:	4623      	mov	r3, r4
 800123a:	80fb      	strh	r3, [r7, #6]
 800123c:	4603      	mov	r3, r0
 800123e:	80bb      	strh	r3, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	2b7f      	cmp	r3, #127	; 0x7f
 800124c:	d901      	bls.n	8001252 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800124e:	237f      	movs	r3, #127	; 0x7f
 8001250:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	2b7f      	cmp	r3, #127	; 0x7f
 8001256:	d901      	bls.n	800125c <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001258:	237f      	movs	r3, #127	; 0x7f
 800125a:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800125c:	88bb      	ldrh	r3, [r7, #4]
 800125e:	2b3f      	cmp	r3, #63	; 0x3f
 8001260:	d901      	bls.n	8001266 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001262:	233f      	movs	r3, #63	; 0x3f
 8001264:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001266:	883b      	ldrh	r3, [r7, #0]
 8001268:	2b3f      	cmp	r3, #63	; 0x3f
 800126a:	d901      	bls.n	8001270 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 800126c:	233f      	movs	r3, #63	; 0x3f
 800126e:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001270:	88fa      	ldrh	r2, [r7, #6]
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	429a      	cmp	r2, r3
 8001276:	d205      	bcs.n	8001284 <SSD1306_DrawLine+0x5a>
 8001278:	887a      	ldrh	r2, [r7, #2]
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	b29b      	uxth	r3, r3
 8001280:	b21b      	sxth	r3, r3
 8001282:	e004      	b.n	800128e <SSD1306_DrawLine+0x64>
 8001284:	88fa      	ldrh	r2, [r7, #6]
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	b29b      	uxth	r3, r3
 800128c:	b21b      	sxth	r3, r3
 800128e:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001290:	88ba      	ldrh	r2, [r7, #4]
 8001292:	883b      	ldrh	r3, [r7, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d205      	bcs.n	80012a4 <SSD1306_DrawLine+0x7a>
 8001298:	883a      	ldrh	r2, [r7, #0]
 800129a:	88bb      	ldrh	r3, [r7, #4]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	b29b      	uxth	r3, r3
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	e004      	b.n	80012ae <SSD1306_DrawLine+0x84>
 80012a4:	88ba      	ldrh	r2, [r7, #4]
 80012a6:	883b      	ldrh	r3, [r7, #0]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80012b0:	88fa      	ldrh	r2, [r7, #6]
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d201      	bcs.n	80012bc <SSD1306_DrawLine+0x92>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e001      	b.n	80012c0 <SSD1306_DrawLine+0x96>
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80012c2:	88ba      	ldrh	r2, [r7, #4]
 80012c4:	883b      	ldrh	r3, [r7, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d201      	bcs.n	80012ce <SSD1306_DrawLine+0xa4>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e001      	b.n	80012d2 <SSD1306_DrawLine+0xa8>
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80012d4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80012d8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012dc:	429a      	cmp	r2, r3
 80012de:	dd06      	ble.n	80012ee <SSD1306_DrawLine+0xc4>
 80012e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012e4:	0fda      	lsrs	r2, r3, #31
 80012e6:	4413      	add	r3, r2
 80012e8:	105b      	asrs	r3, r3, #1
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	e006      	b.n	80012fc <SSD1306_DrawLine+0xd2>
 80012ee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012f2:	0fda      	lsrs	r2, r3, #31
 80012f4:	4413      	add	r3, r2
 80012f6:	105b      	asrs	r3, r3, #1
 80012f8:	425b      	negs	r3, r3
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80012fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d129      	bne.n	800135a <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001306:	883a      	ldrh	r2, [r7, #0]
 8001308:	88bb      	ldrh	r3, [r7, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	d205      	bcs.n	800131a <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800130e:	883b      	ldrh	r3, [r7, #0]
 8001310:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001312:	88bb      	ldrh	r3, [r7, #4]
 8001314:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001316:	893b      	ldrh	r3, [r7, #8]
 8001318:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800131a:	887a      	ldrh	r2, [r7, #2]
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	429a      	cmp	r2, r3
 8001320:	d205      	bcs.n	800132e <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800132a:	893b      	ldrh	r3, [r7, #8]
 800132c:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800132e:	88bb      	ldrh	r3, [r7, #4]
 8001330:	82bb      	strh	r3, [r7, #20]
 8001332:	e00c      	b.n	800134e <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001334:	8ab9      	ldrh	r1, [r7, #20]
 8001336:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fe5b 	bl	8000ff8 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001342:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001346:	b29b      	uxth	r3, r3
 8001348:	3301      	adds	r3, #1
 800134a:	b29b      	uxth	r3, r3
 800134c:	82bb      	strh	r3, [r7, #20]
 800134e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001352:	883b      	ldrh	r3, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	dded      	ble.n	8001334 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001358:	e05f      	b.n	800141a <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 800135a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d129      	bne.n	80013b6 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001362:	883a      	ldrh	r2, [r7, #0]
 8001364:	88bb      	ldrh	r3, [r7, #4]
 8001366:	429a      	cmp	r2, r3
 8001368:	d205      	bcs.n	8001376 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800136a:	883b      	ldrh	r3, [r7, #0]
 800136c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800136e:	88bb      	ldrh	r3, [r7, #4]
 8001370:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001372:	893b      	ldrh	r3, [r7, #8]
 8001374:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001376:	887a      	ldrh	r2, [r7, #2]
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	429a      	cmp	r2, r3
 800137c:	d205      	bcs.n	800138a <SSD1306_DrawLine+0x160>
			tmp = x1;
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001386:	893b      	ldrh	r3, [r7, #8]
 8001388:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	82bb      	strh	r3, [r7, #20]
 800138e:	e00c      	b.n	80013aa <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001390:	8abb      	ldrh	r3, [r7, #20]
 8001392:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001396:	88b9      	ldrh	r1, [r7, #4]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fe2d 	bl	8000ff8 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800139e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	3301      	adds	r3, #1
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	82bb      	strh	r3, [r7, #20]
 80013aa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80013ae:	887b      	ldrh	r3, [r7, #2]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	dded      	ble.n	8001390 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80013b4:	e031      	b.n	800141a <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80013b6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80013ba:	88b9      	ldrh	r1, [r7, #4]
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fe1a 	bl	8000ff8 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80013c4:	88fa      	ldrh	r2, [r7, #6]
 80013c6:	887b      	ldrh	r3, [r7, #2]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d103      	bne.n	80013d4 <SSD1306_DrawLine+0x1aa>
 80013cc:	88ba      	ldrh	r2, [r7, #4]
 80013ce:	883b      	ldrh	r3, [r7, #0]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d021      	beq.n	8001418 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80013d4:	8afb      	ldrh	r3, [r7, #22]
 80013d6:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80013d8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80013dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013e0:	425b      	negs	r3, r3
 80013e2:	429a      	cmp	r2, r3
 80013e4:	dd08      	ble.n	80013f8 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 80013e6:	8afa      	ldrh	r2, [r7, #22]
 80013e8:	8a3b      	ldrh	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80013f0:	89fa      	ldrh	r2, [r7, #14]
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	4413      	add	r3, r2
 80013f6:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 80013f8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80013fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001400:	429a      	cmp	r2, r3
 8001402:	dad8      	bge.n	80013b6 <SSD1306_DrawLine+0x18c>
			err += dx;
 8001404:	8afa      	ldrh	r2, [r7, #22]
 8001406:	8a7b      	ldrh	r3, [r7, #18]
 8001408:	4413      	add	r3, r2
 800140a:	b29b      	uxth	r3, r3
 800140c:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800140e:	89ba      	ldrh	r2, [r7, #12]
 8001410:	88bb      	ldrh	r3, [r7, #4]
 8001412:	4413      	add	r3, r2
 8001414:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001416:	e7ce      	b.n	80013b6 <SSD1306_DrawLine+0x18c>
			break;
 8001418:	bf00      	nop
		} 
	}
}
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd90      	pop	{r4, r7, pc}

08001420 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b085      	sub	sp, #20
 8001424:	af02      	add	r7, sp, #8
 8001426:	4604      	mov	r4, r0
 8001428:	4608      	mov	r0, r1
 800142a:	4611      	mov	r1, r2
 800142c:	461a      	mov	r2, r3
 800142e:	4623      	mov	r3, r4
 8001430:	80fb      	strh	r3, [r7, #6]
 8001432:	4603      	mov	r3, r0
 8001434:	80bb      	strh	r3, [r7, #4]
 8001436:	460b      	mov	r3, r1
 8001438:	807b      	strh	r3, [r7, #2]
 800143a:	4613      	mov	r3, r2
 800143c:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	2b7f      	cmp	r3, #127	; 0x7f
 8001442:	d853      	bhi.n	80014ec <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8001444:	88bb      	ldrh	r3, [r7, #4]
 8001446:	2b3f      	cmp	r3, #63	; 0x3f
 8001448:	d850      	bhi.n	80014ec <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800144a:	88fa      	ldrh	r2, [r7, #6]
 800144c:	887b      	ldrh	r3, [r7, #2]
 800144e:	4413      	add	r3, r2
 8001450:	2b7f      	cmp	r3, #127	; 0x7f
 8001452:	dd03      	ble.n	800145c <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800145a:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 800145c:	88ba      	ldrh	r2, [r7, #4]
 800145e:	883b      	ldrh	r3, [r7, #0]
 8001460:	4413      	add	r3, r2
 8001462:	2b3f      	cmp	r3, #63	; 0x3f
 8001464:	dd03      	ble.n	800146e <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001466:	88bb      	ldrh	r3, [r7, #4]
 8001468:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800146c:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 800146e:	88fa      	ldrh	r2, [r7, #6]
 8001470:	887b      	ldrh	r3, [r7, #2]
 8001472:	4413      	add	r3, r2
 8001474:	b29a      	uxth	r2, r3
 8001476:	88bc      	ldrh	r4, [r7, #4]
 8001478:	88b9      	ldrh	r1, [r7, #4]
 800147a:	88f8      	ldrh	r0, [r7, #6]
 800147c:	7e3b      	ldrb	r3, [r7, #24]
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	4623      	mov	r3, r4
 8001482:	f7ff fed2 	bl	800122a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8001486:	88ba      	ldrh	r2, [r7, #4]
 8001488:	883b      	ldrh	r3, [r7, #0]
 800148a:	4413      	add	r3, r2
 800148c:	b299      	uxth	r1, r3
 800148e:	88fa      	ldrh	r2, [r7, #6]
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	4413      	add	r3, r2
 8001494:	b29c      	uxth	r4, r3
 8001496:	88ba      	ldrh	r2, [r7, #4]
 8001498:	883b      	ldrh	r3, [r7, #0]
 800149a:	4413      	add	r3, r2
 800149c:	b29a      	uxth	r2, r3
 800149e:	88f8      	ldrh	r0, [r7, #6]
 80014a0:	7e3b      	ldrb	r3, [r7, #24]
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	4613      	mov	r3, r2
 80014a6:	4622      	mov	r2, r4
 80014a8:	f7ff febf 	bl	800122a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 80014ac:	88ba      	ldrh	r2, [r7, #4]
 80014ae:	883b      	ldrh	r3, [r7, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	b29c      	uxth	r4, r3
 80014b4:	88fa      	ldrh	r2, [r7, #6]
 80014b6:	88b9      	ldrh	r1, [r7, #4]
 80014b8:	88f8      	ldrh	r0, [r7, #6]
 80014ba:	7e3b      	ldrb	r3, [r7, #24]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	4623      	mov	r3, r4
 80014c0:	f7ff feb3 	bl	800122a <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 80014c4:	88fa      	ldrh	r2, [r7, #6]
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	4413      	add	r3, r2
 80014ca:	b298      	uxth	r0, r3
 80014cc:	88fa      	ldrh	r2, [r7, #6]
 80014ce:	887b      	ldrh	r3, [r7, #2]
 80014d0:	4413      	add	r3, r2
 80014d2:	b29c      	uxth	r4, r3
 80014d4:	88ba      	ldrh	r2, [r7, #4]
 80014d6:	883b      	ldrh	r3, [r7, #0]
 80014d8:	4413      	add	r3, r2
 80014da:	b29a      	uxth	r2, r3
 80014dc:	88b9      	ldrh	r1, [r7, #4]
 80014de:	7e3b      	ldrb	r3, [r7, #24]
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	4613      	mov	r3, r2
 80014e4:	4622      	mov	r2, r4
 80014e6:	f7ff fea0 	bl	800122a <SSD1306_DrawLine>
 80014ea:	e000      	b.n	80014ee <SSD1306_DrawRectangle+0xce>
		return;
 80014ec:	bf00      	nop
}
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd90      	pop	{r4, r7, pc}

080014f4 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	4604      	mov	r4, r0
 80014fc:	4608      	mov	r0, r1
 80014fe:	4611      	mov	r1, r2
 8001500:	461a      	mov	r2, r3
 8001502:	4623      	mov	r3, r4
 8001504:	80fb      	strh	r3, [r7, #6]
 8001506:	4603      	mov	r3, r0
 8001508:	80bb      	strh	r3, [r7, #4]
 800150a:	460b      	mov	r3, r1
 800150c:	807b      	strh	r3, [r7, #2]
 800150e:	4613      	mov	r3, r2
 8001510:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	2b7f      	cmp	r3, #127	; 0x7f
 8001516:	d836      	bhi.n	8001586 <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8001518:	88bb      	ldrh	r3, [r7, #4]
 800151a:	2b3f      	cmp	r3, #63	; 0x3f
 800151c:	d833      	bhi.n	8001586 <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800151e:	88fa      	ldrh	r2, [r7, #6]
 8001520:	887b      	ldrh	r3, [r7, #2]
 8001522:	4413      	add	r3, r2
 8001524:	2b7f      	cmp	r3, #127	; 0x7f
 8001526:	dd03      	ble.n	8001530 <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800152e:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001530:	88ba      	ldrh	r2, [r7, #4]
 8001532:	883b      	ldrh	r3, [r7, #0]
 8001534:	4413      	add	r3, r2
 8001536:	2b3f      	cmp	r3, #63	; 0x3f
 8001538:	dd03      	ble.n	8001542 <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 800153a:	88bb      	ldrh	r3, [r7, #4]
 800153c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001540:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	e018      	b.n	800157a <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	b29a      	uxth	r2, r3
 800154c:	88bb      	ldrh	r3, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	b299      	uxth	r1, r3
 8001552:	88fa      	ldrh	r2, [r7, #6]
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	4413      	add	r3, r2
 8001558:	b29c      	uxth	r4, r3
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	b29a      	uxth	r2, r3
 800155e:	88bb      	ldrh	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	b29a      	uxth	r2, r3
 8001564:	88f8      	ldrh	r0, [r7, #6]
 8001566:	f897 3020 	ldrb.w	r3, [r7, #32]
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	4613      	mov	r3, r2
 800156e:	4622      	mov	r2, r4
 8001570:	f7ff fe5b 	bl	800122a <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	3301      	adds	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	b29b      	uxth	r3, r3
 800157e:	883a      	ldrh	r2, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d2e1      	bcs.n	8001548 <SSD1306_DrawFilledRectangle+0x54>
 8001584:	e000      	b.n	8001588 <SSD1306_DrawFilledRectangle+0x94>
		return;
 8001586:	bf00      	nop
	}
}
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}

0800158e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff fd18 	bl	8000fc8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001598:	f7ff fce8 	bl	8000f6c <SSD1306_UpdateScreen>
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}

080015a0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <ssd1306_I2C_Init+0x24>)
 80015a8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015aa:	e002      	b.n	80015b2 <ssd1306_I2C_Init+0x12>
		p--;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1f9      	bne.n	80015ac <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	0003d090 	.word	0x0003d090

080015c8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b0c7      	sub	sp, #284	; 0x11c
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	4604      	mov	r4, r0
 80015d0:	4608      	mov	r0, r1
 80015d2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80015d6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80015da:	600a      	str	r2, [r1, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015e2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80015e6:	4622      	mov	r2, r4
 80015e8:	701a      	strb	r2, [r3, #0]
 80015ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015ee:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80015f2:	4602      	mov	r2, r0
 80015f4:	701a      	strb	r2, [r3, #0]
 80015f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015fe:	460a      	mov	r2, r1
 8001600:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001602:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800160a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800160e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001612:	7812      	ldrb	r2, [r2, #0]
 8001614:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001616:	2300      	movs	r3, #0
 8001618:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800161c:	e015      	b.n	800164a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800161e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001622:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001626:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	441a      	add	r2, r3
 800162e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001632:	3301      	adds	r3, #1
 8001634:	7811      	ldrb	r1, [r2, #0]
 8001636:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800163a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800163e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001640:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001644:	3301      	adds	r3, #1
 8001646:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800164a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800164e:	b29b      	uxth	r3, r3
 8001650:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001654:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001658:	8812      	ldrh	r2, [r2, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d8df      	bhi.n	800161e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800165e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001662:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b299      	uxth	r1, r3
 800166a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800166e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	3301      	adds	r3, #1
 8001676:	b29b      	uxth	r3, r3
 8001678:	f107 020c 	add.w	r2, r7, #12
 800167c:	200a      	movs	r0, #10
 800167e:	9000      	str	r0, [sp, #0]
 8001680:	4803      	ldr	r0, [pc, #12]	; (8001690 <ssd1306_I2C_WriteMulti+0xc8>)
 8001682:	f001 f83b 	bl	80026fc <HAL_I2C_Master_Transmit>
}
 8001686:	bf00      	nop
 8001688:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800168c:	46bd      	mov	sp, r7
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	200000d8 	.word	0x200000d8

08001694 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af02      	add	r7, sp, #8
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
 800169e:	460b      	mov	r3, r1
 80016a0:	71bb      	strb	r3, [r7, #6]
 80016a2:	4613      	mov	r3, r2
 80016a4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80016a6:	79bb      	ldrb	r3, [r7, #6]
 80016a8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80016aa:	797b      	ldrb	r3, [r7, #5]
 80016ac:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	b299      	uxth	r1, r3
 80016b2:	f107 020c 	add.w	r2, r7, #12
 80016b6:	230a      	movs	r3, #10
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2302      	movs	r3, #2
 80016bc:	4803      	ldr	r0, [pc, #12]	; (80016cc <ssd1306_I2C_Write+0x38>)
 80016be:	f001 f81d 	bl	80026fc <HAL_I2C_Master_Transmit>
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200000d8 	.word	0x200000d8

080016d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_MspInit+0x5c>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	4a14      	ldr	r2, [pc, #80]	; (800172c <HAL_MspInit+0x5c>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6193      	str	r3, [r2, #24]
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_MspInit+0x5c>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <HAL_MspInit+0x5c>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a0e      	ldr	r2, [pc, #56]	; (800172c <HAL_MspInit+0x5c>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <HAL_MspInit+0x5c>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_MspInit+0x60>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_MspInit+0x60>)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	40021000 	.word	0x40021000
 8001730:	40010000 	.word	0x40010000

08001734 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <HAL_ADC_MspInit+0x6c>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d121      	bne.n	8001798 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <HAL_ADC_MspInit+0x70>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <HAL_ADC_MspInit+0x70>)
 800175a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_ADC_MspInit+0x70>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_ADC_MspInit+0x70>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a0c      	ldr	r2, [pc, #48]	; (80017a4 <HAL_ADC_MspInit+0x70>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_ADC_MspInit+0x70>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001784:	2308      	movs	r3, #8
 8001786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001788:	2303      	movs	r3, #3
 800178a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4619      	mov	r1, r3
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <HAL_ADC_MspInit+0x74>)
 8001794:	f000 fcda 	bl	800214c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001798:	bf00      	nop
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40012400 	.word	0x40012400
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010800 	.word	0x40010800

080017ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a16      	ldr	r2, [pc, #88]	; (8001820 <HAL_I2C_MspInit+0x74>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d125      	bne.n	8001818 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_I2C_MspInit+0x78>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a14      	ldr	r2, [pc, #80]	; (8001824 <HAL_I2C_MspInit+0x78>)
 80017d2:	f043 0308 	orr.w	r3, r3, #8
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_I2C_MspInit+0x78>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017e4:	23c0      	movs	r3, #192	; 0xc0
 80017e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017e8:	2312      	movs	r3, #18
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	4619      	mov	r1, r3
 80017fa:	480b      	ldr	r0, [pc, #44]	; (8001828 <HAL_I2C_MspInit+0x7c>)
 80017fc:	f000 fca6 	bl	800214c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_I2C_MspInit+0x78>)
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	4a07      	ldr	r2, [pc, #28]	; (8001824 <HAL_I2C_MspInit+0x78>)
 8001806:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800180a:	61d3      	str	r3, [r2, #28]
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_I2C_MspInit+0x78>)
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001818:	bf00      	nop
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40005400 	.word	0x40005400
 8001824:	40021000 	.word	0x40021000
 8001828:	40010c00 	.word	0x40010c00

0800182c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800183c:	d10b      	bne.n	8001856 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_TIM_Base_MspInit+0x34>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	4a07      	ldr	r2, [pc, #28]	; (8001860 <HAL_TIM_Base_MspInit+0x34>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	61d3      	str	r3, [r2, #28]
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_TIM_Base_MspInit+0x34>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <HAL_TIM_Encoder_MspInit+0x70>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d123      	bne.n	80018cc <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <HAL_TIM_Encoder_MspInit+0x74>)
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	61d3      	str	r3, [r2, #28]
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_TIM_Encoder_MspInit+0x74>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <HAL_TIM_Encoder_MspInit+0x74>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_TIM_Encoder_MspInit+0x74>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018b4:	23c0      	movs	r3, #192	; 0xc0
 80018b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018bc:	2301      	movs	r3, #1
 80018be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	4619      	mov	r1, r3
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <HAL_TIM_Encoder_MspInit+0x78>)
 80018c8:	f000 fc40 	bl	800214c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018cc:	bf00      	nop
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40000400 	.word	0x40000400
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010800 	.word	0x40010800

080018e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018fe:	d117      	bne.n	8001930 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_TIM_MspPostInit+0x58>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <HAL_TIM_MspPostInit+0x58>)
 8001906:	f043 0304 	orr.w	r3, r3, #4
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_TIM_MspPostInit+0x58>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RLED_Pin|HOT_PLATE_Pin;
 8001918:	2306      	movs	r3, #6
 800191a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2302      	movs	r3, #2
 8001922:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	4619      	mov	r1, r3
 800192a:	4804      	ldr	r0, [pc, #16]	; (800193c <HAL_TIM_MspPostInit+0x5c>)
 800192c:	f000 fc0e 	bl	800214c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001930:	bf00      	nop
 8001932:	3720      	adds	r7, #32
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40021000 	.word	0x40021000
 800193c:	40010800 	.word	0x40010800

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <NMI_Handler+0x4>

08001946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <MemManage_Handler+0x4>

08001952 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <UsageFault_Handler+0x4>

0800195e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr

0800196a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001986:	f000 f8ab 	bl	8001ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001998:	4a14      	ldr	r2, [pc, #80]	; (80019ec <_sbrk+0x5c>)
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <_sbrk+0x60>)
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <_sbrk+0x64>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <_sbrk+0x68>)
 80019b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d207      	bcs.n	80019d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c0:	f002 fe74 	bl	80046ac <__errno>
 80019c4:	4603      	mov	r3, r0
 80019c6:	220c      	movs	r2, #12
 80019c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	e009      	b.n	80019e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <_sbrk+0x64>)
 80019e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e2:	68fb      	ldr	r3, [r7, #12]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20002800 	.word	0x20002800
 80019f0:	00000400 	.word	0x00000400
 80019f4:	200005d4 	.word	0x200005d4
 80019f8:	200005f0 	.word	0x200005f0

080019fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a0a:	490d      	ldr	r1, [pc, #52]	; (8001a40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a20:	4c0a      	ldr	r4, [pc, #40]	; (8001a4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a2e:	f7ff ffe5 	bl	80019fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a32:	f002 fe41 	bl	80046b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a36:	f7fe fc29 	bl	800028c <main>
  bx lr
 8001a3a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001a44:	0800584c 	.word	0x0800584c
  ldr r2, =_sbss
 8001a48:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001a4c:	200005ec 	.word	0x200005ec

08001a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC1_2_IRQHandler>
	...

08001a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_Init+0x28>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <HAL_Init+0x28>)
 8001a5e:	f043 0310 	orr.w	r3, r3, #16
 8001a62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a64:	2003      	movs	r0, #3
 8001a66:	f000 fb3d 	bl	80020e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a6a:	200f      	movs	r0, #15
 8001a6c:	f000 f808 	bl	8001a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a70:	f7ff fe2e 	bl	80016d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40022000 	.word	0x40022000

08001a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_InitTick+0x54>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_InitTick+0x58>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4619      	mov	r1, r3
 8001a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 fb47 	bl	8002132 <HAL_SYSTICK_Config>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00e      	b.n	8001acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b0f      	cmp	r3, #15
 8001ab2:	d80a      	bhi.n	8001aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f000 fb1d 	bl	80020fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac0:	4a06      	ldr	r2, [pc, #24]	; (8001adc <HAL_InitTick+0x5c>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e000      	b.n	8001acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	2000000c 	.word	0x2000000c
 8001ad8:	20000014 	.word	0x20000014
 8001adc:	20000010 	.word	0x20000010

08001ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_IncTick+0x1c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_IncTick+0x20>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	4a03      	ldr	r2, [pc, #12]	; (8001b00 <HAL_IncTick+0x20>)
 8001af2:	6013      	str	r3, [r2, #0]
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	20000014 	.word	0x20000014
 8001b00:	200005d8 	.word	0x200005d8

08001b04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <HAL_GetTick+0x10>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	200005d8 	.word	0x200005d8

08001b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff fff0 	bl	8001b04 <HAL_GetTick>
 8001b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b30:	d005      	beq.n	8001b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_Delay+0x44>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b3e:	bf00      	nop
 8001b40:	f7ff ffe0 	bl	8001b04 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d8f7      	bhi.n	8001b40 <HAL_Delay+0x28>
  {
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000014 	.word	0x20000014

08001b60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e0be      	b.n	8001d00 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d109      	bne.n	8001ba4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff fdc8 	bl	8001734 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f9ab 	bl	8001f00 <ADC_ConversionStop_Disable>
 8001baa:	4603      	mov	r3, r0
 8001bac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f040 8099 	bne.w	8001cee <HAL_ADC_Init+0x18e>
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 8095 	bne.w	8001cee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bcc:	f023 0302 	bic.w	r3, r3, #2
 8001bd0:	f043 0202 	orr.w	r2, r3, #2
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001be0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7b1b      	ldrb	r3, [r3, #12]
 8001be6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001be8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bf8:	d003      	beq.n	8001c02 <HAL_ADC_Init+0xa2>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d102      	bne.n	8001c08 <HAL_ADC_Init+0xa8>
 8001c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c06:	e000      	b.n	8001c0a <HAL_ADC_Init+0xaa>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7d1b      	ldrb	r3, [r3, #20]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d119      	bne.n	8001c4c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7b1b      	ldrb	r3, [r3, #12]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d109      	bne.n	8001c34 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	035a      	lsls	r2, r3, #13
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	e00b      	b.n	8001c4c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	f043 0220 	orr.w	r2, r3, #32
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	f043 0201 	orr.w	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <HAL_ADC_Init+0x1a8>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	68b9      	ldr	r1, [r7, #8]
 8001c70:	430b      	orrs	r3, r1
 8001c72:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c7c:	d003      	beq.n	8001c86 <HAL_ADC_Init+0x126>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d104      	bne.n	8001c90 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	051b      	lsls	r3, r3, #20
 8001c8e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <HAL_ADC_Init+0x1ac>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d10b      	bne.n	8001ccc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	f023 0303 	bic.w	r3, r3, #3
 8001cc2:	f043 0201 	orr.w	r2, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cca:	e018      	b.n	8001cfe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	f023 0312 	bic.w	r3, r3, #18
 8001cd4:	f043 0210 	orr.w	r2, r3, #16
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	f043 0201 	orr.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cec:	e007      	b.n	8001cfe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf2:	f043 0210 	orr.w	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	ffe1f7fd 	.word	0xffe1f7fd
 8001d0c:	ff1f0efe 	.word	0xff1f0efe

08001d10 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x20>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e0dc      	b.n	8001eea <HAL_ADC_ConfigChannel+0x1da>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b06      	cmp	r3, #6
 8001d3e:	d81c      	bhi.n	8001d7a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	3b05      	subs	r3, #5
 8001d52:	221f      	movs	r2, #31
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	4019      	ands	r1, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	3b05      	subs	r3, #5
 8001d6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	635a      	str	r2, [r3, #52]	; 0x34
 8001d78:	e03c      	b.n	8001df4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d81c      	bhi.n	8001dbc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	3b23      	subs	r3, #35	; 0x23
 8001d94:	221f      	movs	r2, #31
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	4019      	ands	r1, r3
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	3b23      	subs	r3, #35	; 0x23
 8001dae:	fa00 f203 	lsl.w	r2, r0, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	631a      	str	r2, [r3, #48]	; 0x30
 8001dba:	e01b      	b.n	8001df4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	3b41      	subs	r3, #65	; 0x41
 8001dce:	221f      	movs	r2, #31
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	4019      	ands	r1, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	3b41      	subs	r3, #65	; 0x41
 8001de8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b09      	cmp	r3, #9
 8001dfa:	d91c      	bls.n	8001e36 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68d9      	ldr	r1, [r3, #12]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b1e      	subs	r3, #30
 8001e0e:	2207      	movs	r2, #7
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	4019      	ands	r1, r3
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	6898      	ldr	r0, [r3, #8]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	3b1e      	subs	r3, #30
 8001e28:	fa00 f203 	lsl.w	r2, r0, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	e019      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6919      	ldr	r1, [r3, #16]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	2207      	movs	r2, #7
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	4019      	ands	r1, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6898      	ldr	r0, [r3, #8]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b10      	cmp	r3, #16
 8001e70:	d003      	beq.n	8001e7a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e76:	2b11      	cmp	r3, #17
 8001e78:	d132      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1d      	ldr	r2, [pc, #116]	; (8001ef4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d125      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d126      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ea0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b10      	cmp	r3, #16
 8001ea8:	d11a      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eaa:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a13      	ldr	r2, [pc, #76]	; (8001efc <HAL_ADC_ConfigChannel+0x1ec>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	0c9a      	lsrs	r2, r3, #18
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ec0:	e002      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f9      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x1b2>
 8001ece:	e007      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	f043 0220 	orr.w	r2, r3, #32
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	40012400 	.word	0x40012400
 8001ef8:	2000000c 	.word	0x2000000c
 8001efc:	431bde83 	.word	0x431bde83

08001f00 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d12e      	bne.n	8001f78 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0201 	bic.w	r2, r2, #1
 8001f28:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f2a:	f7ff fdeb 	bl	8001b04 <HAL_GetTick>
 8001f2e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f30:	e01b      	b.n	8001f6a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f32:	f7ff fde7 	bl	8001b04 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d914      	bls.n	8001f6a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d10d      	bne.n	8001f6a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f52:	f043 0210 	orr.w	r2, r3, #16
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	f043 0201 	orr.w	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e007      	b.n	8001f7a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d0dc      	beq.n	8001f32 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb6:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	60d3      	str	r3, [r2, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	f003 0307 	and.w	r3, r3, #7
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	6039      	str	r1, [r7, #0]
 8001ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	db0a      	blt.n	8002012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	490c      	ldr	r1, [pc, #48]	; (8002034 <__NVIC_SetPriority+0x4c>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	0112      	lsls	r2, r2, #4
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	440b      	add	r3, r1
 800200c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002010:	e00a      	b.n	8002028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4908      	ldr	r1, [pc, #32]	; (8002038 <__NVIC_SetPriority+0x50>)
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	3b04      	subs	r3, #4
 8002020:	0112      	lsls	r2, r2, #4
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	440b      	add	r3, r1
 8002026:	761a      	strb	r2, [r3, #24]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000e100 	.word	0xe000e100
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	; 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f1c3 0307 	rsb	r3, r3, #7
 8002056:	2b04      	cmp	r3, #4
 8002058:	bf28      	it	cs
 800205a:	2304      	movcs	r3, #4
 800205c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3304      	adds	r3, #4
 8002062:	2b06      	cmp	r3, #6
 8002064:	d902      	bls.n	800206c <NVIC_EncodePriority+0x30>
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3b03      	subs	r3, #3
 800206a:	e000      	b.n	800206e <NVIC_EncodePriority+0x32>
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	f04f 32ff 	mov.w	r2, #4294967295
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43da      	mvns	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	401a      	ands	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002084:	f04f 31ff 	mov.w	r1, #4294967295
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	43d9      	mvns	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	4313      	orrs	r3, r2
         );
}
 8002096:	4618      	mov	r0, r3
 8002098:	3724      	adds	r7, #36	; 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b0:	d301      	bcc.n	80020b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00f      	b.n	80020d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <SysTick_Config+0x40>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020be:	210f      	movs	r1, #15
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f7ff ff90 	bl	8001fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <SysTick_Config+0x40>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ce:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <SysTick_Config+0x40>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff49 	bl	8001f84 <__NVIC_SetPriorityGrouping>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800210c:	f7ff ff5e 	bl	8001fcc <__NVIC_GetPriorityGrouping>
 8002110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	6978      	ldr	r0, [r7, #20]
 8002118:	f7ff ff90 	bl	800203c <NVIC_EncodePriority>
 800211c:	4602      	mov	r2, r0
 800211e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff5f 	bl	8001fe8 <__NVIC_SetPriority>
}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff ffb0 	bl	80020a0 <SysTick_Config>
 8002140:	4603      	mov	r3, r0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800214c:	b480      	push	{r7}
 800214e:	b08b      	sub	sp, #44	; 0x2c
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215e:	e161      	b.n	8002424 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002160:	2201      	movs	r2, #1
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	429a      	cmp	r2, r3
 800217a:	f040 8150 	bne.w	800241e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4a97      	ldr	r2, [pc, #604]	; (80023e0 <HAL_GPIO_Init+0x294>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d05e      	beq.n	8002246 <HAL_GPIO_Init+0xfa>
 8002188:	4a95      	ldr	r2, [pc, #596]	; (80023e0 <HAL_GPIO_Init+0x294>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d875      	bhi.n	800227a <HAL_GPIO_Init+0x12e>
 800218e:	4a95      	ldr	r2, [pc, #596]	; (80023e4 <HAL_GPIO_Init+0x298>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d058      	beq.n	8002246 <HAL_GPIO_Init+0xfa>
 8002194:	4a93      	ldr	r2, [pc, #588]	; (80023e4 <HAL_GPIO_Init+0x298>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d86f      	bhi.n	800227a <HAL_GPIO_Init+0x12e>
 800219a:	4a93      	ldr	r2, [pc, #588]	; (80023e8 <HAL_GPIO_Init+0x29c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d052      	beq.n	8002246 <HAL_GPIO_Init+0xfa>
 80021a0:	4a91      	ldr	r2, [pc, #580]	; (80023e8 <HAL_GPIO_Init+0x29c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d869      	bhi.n	800227a <HAL_GPIO_Init+0x12e>
 80021a6:	4a91      	ldr	r2, [pc, #580]	; (80023ec <HAL_GPIO_Init+0x2a0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d04c      	beq.n	8002246 <HAL_GPIO_Init+0xfa>
 80021ac:	4a8f      	ldr	r2, [pc, #572]	; (80023ec <HAL_GPIO_Init+0x2a0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d863      	bhi.n	800227a <HAL_GPIO_Init+0x12e>
 80021b2:	4a8f      	ldr	r2, [pc, #572]	; (80023f0 <HAL_GPIO_Init+0x2a4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d046      	beq.n	8002246 <HAL_GPIO_Init+0xfa>
 80021b8:	4a8d      	ldr	r2, [pc, #564]	; (80023f0 <HAL_GPIO_Init+0x2a4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d85d      	bhi.n	800227a <HAL_GPIO_Init+0x12e>
 80021be:	2b12      	cmp	r3, #18
 80021c0:	d82a      	bhi.n	8002218 <HAL_GPIO_Init+0xcc>
 80021c2:	2b12      	cmp	r3, #18
 80021c4:	d859      	bhi.n	800227a <HAL_GPIO_Init+0x12e>
 80021c6:	a201      	add	r2, pc, #4	; (adr r2, 80021cc <HAL_GPIO_Init+0x80>)
 80021c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021cc:	08002247 	.word	0x08002247
 80021d0:	08002221 	.word	0x08002221
 80021d4:	08002233 	.word	0x08002233
 80021d8:	08002275 	.word	0x08002275
 80021dc:	0800227b 	.word	0x0800227b
 80021e0:	0800227b 	.word	0x0800227b
 80021e4:	0800227b 	.word	0x0800227b
 80021e8:	0800227b 	.word	0x0800227b
 80021ec:	0800227b 	.word	0x0800227b
 80021f0:	0800227b 	.word	0x0800227b
 80021f4:	0800227b 	.word	0x0800227b
 80021f8:	0800227b 	.word	0x0800227b
 80021fc:	0800227b 	.word	0x0800227b
 8002200:	0800227b 	.word	0x0800227b
 8002204:	0800227b 	.word	0x0800227b
 8002208:	0800227b 	.word	0x0800227b
 800220c:	0800227b 	.word	0x0800227b
 8002210:	08002229 	.word	0x08002229
 8002214:	0800223d 	.word	0x0800223d
 8002218:	4a76      	ldr	r2, [pc, #472]	; (80023f4 <HAL_GPIO_Init+0x2a8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800221e:	e02c      	b.n	800227a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	623b      	str	r3, [r7, #32]
          break;
 8002226:	e029      	b.n	800227c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	3304      	adds	r3, #4
 800222e:	623b      	str	r3, [r7, #32]
          break;
 8002230:	e024      	b.n	800227c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	3308      	adds	r3, #8
 8002238:	623b      	str	r3, [r7, #32]
          break;
 800223a:	e01f      	b.n	800227c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	330c      	adds	r3, #12
 8002242:	623b      	str	r3, [r7, #32]
          break;
 8002244:	e01a      	b.n	800227c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d102      	bne.n	8002254 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800224e:	2304      	movs	r3, #4
 8002250:	623b      	str	r3, [r7, #32]
          break;
 8002252:	e013      	b.n	800227c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d105      	bne.n	8002268 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800225c:	2308      	movs	r3, #8
 800225e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	611a      	str	r2, [r3, #16]
          break;
 8002266:	e009      	b.n	800227c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002268:	2308      	movs	r3, #8
 800226a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	615a      	str	r2, [r3, #20]
          break;
 8002272:	e003      	b.n	800227c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002274:	2300      	movs	r3, #0
 8002276:	623b      	str	r3, [r7, #32]
          break;
 8002278:	e000      	b.n	800227c <HAL_GPIO_Init+0x130>
          break;
 800227a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2bff      	cmp	r3, #255	; 0xff
 8002280:	d801      	bhi.n	8002286 <HAL_GPIO_Init+0x13a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	e001      	b.n	800228a <HAL_GPIO_Init+0x13e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3304      	adds	r3, #4
 800228a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	2bff      	cmp	r3, #255	; 0xff
 8002290:	d802      	bhi.n	8002298 <HAL_GPIO_Init+0x14c>
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	e002      	b.n	800229e <HAL_GPIO_Init+0x152>
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	3b08      	subs	r3, #8
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	210f      	movs	r1, #15
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	401a      	ands	r2, r3
 80022b0:	6a39      	ldr	r1, [r7, #32]
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	fa01 f303 	lsl.w	r3, r1, r3
 80022b8:	431a      	orrs	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 80a9 	beq.w	800241e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022cc:	4b4a      	ldr	r3, [pc, #296]	; (80023f8 <HAL_GPIO_Init+0x2ac>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	4a49      	ldr	r2, [pc, #292]	; (80023f8 <HAL_GPIO_Init+0x2ac>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6193      	str	r3, [r2, #24]
 80022d8:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <HAL_GPIO_Init+0x2ac>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022e4:	4a45      	ldr	r2, [pc, #276]	; (80023fc <HAL_GPIO_Init+0x2b0>)
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	089b      	lsrs	r3, r3, #2
 80022ea:	3302      	adds	r3, #2
 80022ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	220f      	movs	r2, #15
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4013      	ands	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a3d      	ldr	r2, [pc, #244]	; (8002400 <HAL_GPIO_Init+0x2b4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d00d      	beq.n	800232c <HAL_GPIO_Init+0x1e0>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a3c      	ldr	r2, [pc, #240]	; (8002404 <HAL_GPIO_Init+0x2b8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d007      	beq.n	8002328 <HAL_GPIO_Init+0x1dc>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a3b      	ldr	r2, [pc, #236]	; (8002408 <HAL_GPIO_Init+0x2bc>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d101      	bne.n	8002324 <HAL_GPIO_Init+0x1d8>
 8002320:	2302      	movs	r3, #2
 8002322:	e004      	b.n	800232e <HAL_GPIO_Init+0x1e2>
 8002324:	2303      	movs	r3, #3
 8002326:	e002      	b.n	800232e <HAL_GPIO_Init+0x1e2>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <HAL_GPIO_Init+0x1e2>
 800232c:	2300      	movs	r3, #0
 800232e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002330:	f002 0203 	and.w	r2, r2, #3
 8002334:	0092      	lsls	r2, r2, #2
 8002336:	4093      	lsls	r3, r2
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800233e:	492f      	ldr	r1, [pc, #188]	; (80023fc <HAL_GPIO_Init+0x2b0>)
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3302      	adds	r3, #2
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002358:	4b2c      	ldr	r3, [pc, #176]	; (800240c <HAL_GPIO_Init+0x2c0>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	492b      	ldr	r1, [pc, #172]	; (800240c <HAL_GPIO_Init+0x2c0>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	600b      	str	r3, [r1, #0]
 8002364:	e006      	b.n	8002374 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002366:	4b29      	ldr	r3, [pc, #164]	; (800240c <HAL_GPIO_Init+0x2c0>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	43db      	mvns	r3, r3
 800236e:	4927      	ldr	r1, [pc, #156]	; (800240c <HAL_GPIO_Init+0x2c0>)
 8002370:	4013      	ands	r3, r2
 8002372:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d006      	beq.n	800238e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002380:	4b22      	ldr	r3, [pc, #136]	; (800240c <HAL_GPIO_Init+0x2c0>)
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	4921      	ldr	r1, [pc, #132]	; (800240c <HAL_GPIO_Init+0x2c0>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
 800238c:	e006      	b.n	800239c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800238e:	4b1f      	ldr	r3, [pc, #124]	; (800240c <HAL_GPIO_Init+0x2c0>)
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	43db      	mvns	r3, r3
 8002396:	491d      	ldr	r1, [pc, #116]	; (800240c <HAL_GPIO_Init+0x2c0>)
 8002398:	4013      	ands	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d006      	beq.n	80023b6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_GPIO_Init+0x2c0>)
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	4917      	ldr	r1, [pc, #92]	; (800240c <HAL_GPIO_Init+0x2c0>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	608b      	str	r3, [r1, #8]
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_GPIO_Init+0x2c0>)
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	43db      	mvns	r3, r3
 80023be:	4913      	ldr	r1, [pc, #76]	; (800240c <HAL_GPIO_Init+0x2c0>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01f      	beq.n	8002410 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023d0:	4b0e      	ldr	r3, [pc, #56]	; (800240c <HAL_GPIO_Init+0x2c0>)
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	490d      	ldr	r1, [pc, #52]	; (800240c <HAL_GPIO_Init+0x2c0>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60cb      	str	r3, [r1, #12]
 80023dc:	e01f      	b.n	800241e <HAL_GPIO_Init+0x2d2>
 80023de:	bf00      	nop
 80023e0:	10320000 	.word	0x10320000
 80023e4:	10310000 	.word	0x10310000
 80023e8:	10220000 	.word	0x10220000
 80023ec:	10210000 	.word	0x10210000
 80023f0:	10120000 	.word	0x10120000
 80023f4:	10110000 	.word	0x10110000
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40010000 	.word	0x40010000
 8002400:	40010800 	.word	0x40010800
 8002404:	40010c00 	.word	0x40010c00
 8002408:	40011000 	.word	0x40011000
 800240c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_GPIO_Init+0x2f4>)
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	43db      	mvns	r3, r3
 8002418:	4909      	ldr	r1, [pc, #36]	; (8002440 <HAL_GPIO_Init+0x2f4>)
 800241a:	4013      	ands	r3, r2
 800241c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	3301      	adds	r3, #1
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	fa22 f303 	lsr.w	r3, r2, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	f47f ae96 	bne.w	8002160 <HAL_GPIO_Init+0x14>
  }
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	372c      	adds	r7, #44	; 0x2c
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	40010400 	.word	0x40010400

08002444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	e001      	b.n	8002466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002466:	7bfb      	ldrb	r3, [r7, #15]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
	...

08002474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e12b      	b.n	80026de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff f986 	bl	80017ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2224      	movs	r2, #36	; 0x24
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024d8:	f001 f918 	bl	800370c <HAL_RCC_GetPCLK1Freq>
 80024dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4a81      	ldr	r2, [pc, #516]	; (80026e8 <HAL_I2C_Init+0x274>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d807      	bhi.n	80024f8 <HAL_I2C_Init+0x84>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4a80      	ldr	r2, [pc, #512]	; (80026ec <HAL_I2C_Init+0x278>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	bf94      	ite	ls
 80024f0:	2301      	movls	r3, #1
 80024f2:	2300      	movhi	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	e006      	b.n	8002506 <HAL_I2C_Init+0x92>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a7d      	ldr	r2, [pc, #500]	; (80026f0 <HAL_I2C_Init+0x27c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	bf94      	ite	ls
 8002500:	2301      	movls	r3, #1
 8002502:	2300      	movhi	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e0e7      	b.n	80026de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4a78      	ldr	r2, [pc, #480]	; (80026f4 <HAL_I2C_Init+0x280>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	0c9b      	lsrs	r3, r3, #18
 8002518:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	430a      	orrs	r2, r1
 800252c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4a6a      	ldr	r2, [pc, #424]	; (80026e8 <HAL_I2C_Init+0x274>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d802      	bhi.n	8002548 <HAL_I2C_Init+0xd4>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	3301      	adds	r3, #1
 8002546:	e009      	b.n	800255c <HAL_I2C_Init+0xe8>
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800254e:	fb02 f303 	mul.w	r3, r2, r3
 8002552:	4a69      	ldr	r2, [pc, #420]	; (80026f8 <HAL_I2C_Init+0x284>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	099b      	lsrs	r3, r3, #6
 800255a:	3301      	adds	r3, #1
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	430b      	orrs	r3, r1
 8002562:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800256e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	495c      	ldr	r1, [pc, #368]	; (80026e8 <HAL_I2C_Init+0x274>)
 8002578:	428b      	cmp	r3, r1
 800257a:	d819      	bhi.n	80025b0 <HAL_I2C_Init+0x13c>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1e59      	subs	r1, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	fbb1 f3f3 	udiv	r3, r1, r3
 800258a:	1c59      	adds	r1, r3, #1
 800258c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002590:	400b      	ands	r3, r1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_I2C_Init+0x138>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1e59      	subs	r1, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025aa:	e051      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 80025ac:	2304      	movs	r3, #4
 80025ae:	e04f      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d111      	bne.n	80025dc <HAL_I2C_Init+0x168>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1e58      	subs	r0, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	440b      	add	r3, r1
 80025c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	e012      	b.n	8002602 <HAL_I2C_Init+0x18e>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1e58      	subs	r0, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	0099      	lsls	r1, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f2:	3301      	adds	r3, #1
 80025f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	bf0c      	ite	eq
 80025fc:	2301      	moveq	r3, #1
 80025fe:	2300      	movne	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_Init+0x196>
 8002606:	2301      	movs	r3, #1
 8002608:	e022      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10e      	bne.n	8002630 <HAL_I2C_Init+0x1bc>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1e58      	subs	r0, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	440b      	add	r3, r1
 8002620:	fbb0 f3f3 	udiv	r3, r0, r3
 8002624:	3301      	adds	r3, #1
 8002626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800262e:	e00f      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1e58      	subs	r0, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	0099      	lsls	r1, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	fbb0 f3f3 	udiv	r3, r0, r3
 8002646:	3301      	adds	r3, #1
 8002648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	6809      	ldr	r1, [r1, #0]
 8002654:	4313      	orrs	r3, r2
 8002656:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800267e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6911      	ldr	r1, [r2, #16]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68d2      	ldr	r2, [r2, #12]
 800268a:	4311      	orrs	r1, r2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	430b      	orrs	r3, r1
 8002692:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	000186a0 	.word	0x000186a0
 80026ec:	001e847f 	.word	0x001e847f
 80026f0:	003d08ff 	.word	0x003d08ff
 80026f4:	431bde83 	.word	0x431bde83
 80026f8:	10624dd3 	.word	0x10624dd3

080026fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	461a      	mov	r2, r3
 8002708:	460b      	mov	r3, r1
 800270a:	817b      	strh	r3, [r7, #10]
 800270c:	4613      	mov	r3, r2
 800270e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002710:	f7ff f9f8 	bl	8001b04 <HAL_GetTick>
 8002714:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b20      	cmp	r3, #32
 8002720:	f040 80e0 	bne.w	80028e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	2319      	movs	r3, #25
 800272a:	2201      	movs	r2, #1
 800272c:	4970      	ldr	r1, [pc, #448]	; (80028f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fa92 	bl	8002c58 <I2C_WaitOnFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800273a:	2302      	movs	r3, #2
 800273c:	e0d3      	b.n	80028e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_I2C_Master_Transmit+0x50>
 8002748:	2302      	movs	r3, #2
 800274a:	e0cc      	b.n	80028e6 <HAL_I2C_Master_Transmit+0x1ea>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d007      	beq.n	8002772 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0201 	orr.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002780:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2221      	movs	r2, #33	; 0x21
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2210      	movs	r2, #16
 800278e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	893a      	ldrh	r2, [r7, #8]
 80027a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4a50      	ldr	r2, [pc, #320]	; (80028f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80027b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027b4:	8979      	ldrh	r1, [r7, #10]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	6a3a      	ldr	r2, [r7, #32]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f9ca 	bl	8002b54 <I2C_MasterRequestWrite>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e08d      	b.n	80028e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027e0:	e066      	b.n	80028b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	6a39      	ldr	r1, [r7, #32]
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 fb0c 	bl	8002e04 <I2C_WaitOnTXEFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00d      	beq.n	800280e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d107      	bne.n	800280a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002808:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e06b      	b.n	80028e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b04      	cmp	r3, #4
 800284a:	d11b      	bne.n	8002884 <HAL_I2C_Master_Transmit+0x188>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002850:	2b00      	cmp	r3, #0
 8002852:	d017      	beq.n	8002884 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	781a      	ldrb	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	6a39      	ldr	r1, [r7, #32]
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 fafc 	bl	8002e86 <I2C_WaitOnBTFFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00d      	beq.n	80028b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	2b04      	cmp	r3, #4
 800289a:	d107      	bne.n	80028ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e01a      	b.n	80028e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d194      	bne.n	80027e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	e000      	b.n	80028e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028e4:	2302      	movs	r3, #2
  }
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	00100002 	.word	0x00100002
 80028f4:	ffff0000 	.word	0xffff0000

080028f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	460b      	mov	r3, r1
 8002906:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002908:	f7ff f8fc 	bl	8001b04 <HAL_GetTick>
 800290c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800290e:	2301      	movs	r3, #1
 8002910:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b20      	cmp	r3, #32
 800291c:	f040 8111 	bne.w	8002b42 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2319      	movs	r3, #25
 8002926:	2201      	movs	r2, #1
 8002928:	4988      	ldr	r1, [pc, #544]	; (8002b4c <HAL_I2C_IsDeviceReady+0x254>)
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f994 	bl	8002c58 <I2C_WaitOnFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002936:	2302      	movs	r3, #2
 8002938:	e104      	b.n	8002b44 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_I2C_IsDeviceReady+0x50>
 8002944:	2302      	movs	r3, #2
 8002946:	e0fd      	b.n	8002b44 <HAL_I2C_IsDeviceReady+0x24c>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d007      	beq.n	800296e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 0201 	orr.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800297c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2224      	movs	r2, #36	; 0x24
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4a70      	ldr	r2, [pc, #448]	; (8002b50 <HAL_I2C_IsDeviceReady+0x258>)
 8002990:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f952 	bl	8002c58 <I2C_WaitOnFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00d      	beq.n	80029d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c8:	d103      	bne.n	80029d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e0b6      	b.n	8002b44 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029d6:	897b      	ldrh	r3, [r7, #10]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80029e6:	f7ff f88d 	bl	8001b04 <HAL_GetTick>
 80029ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	bf0c      	ite	eq
 80029fa:	2301      	moveq	r3, #1
 80029fc:	2300      	movne	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a10:	bf0c      	ite	eq
 8002a12:	2301      	moveq	r3, #1
 8002a14:	2300      	movne	r3, #0
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a1a:	e025      	b.n	8002a68 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a1c:	f7ff f872 	bl	8001b04 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d302      	bcc.n	8002a32 <HAL_I2C_IsDeviceReady+0x13a>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	22a0      	movs	r2, #160	; 0xa0
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2ba0      	cmp	r3, #160	; 0xa0
 8002a72:	d005      	beq.n	8002a80 <HAL_I2C_IsDeviceReady+0x188>
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <HAL_I2C_IsDeviceReady+0x188>
 8002a7a:	7dbb      	ldrb	r3, [r7, #22]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0cd      	beq.n	8002a1c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d129      	bne.n	8002aea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2319      	movs	r3, #25
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	4921      	ldr	r1, [pc, #132]	; (8002b4c <HAL_I2C_IsDeviceReady+0x254>)
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f8c6 	bl	8002c58 <I2C_WaitOnFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e036      	b.n	8002b44 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e02c      	b.n	8002b44 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b02:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	2319      	movs	r3, #25
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	490f      	ldr	r1, [pc, #60]	; (8002b4c <HAL_I2C_IsDeviceReady+0x254>)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f8a2 	bl	8002c58 <I2C_WaitOnFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e012      	b.n	8002b44 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	3301      	adds	r3, #1
 8002b22:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	f4ff af32 	bcc.w	8002992 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002b42:	2302      	movs	r3, #2
  }
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3720      	adds	r7, #32
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	00100002 	.word	0x00100002
 8002b50:	ffff0000 	.word	0xffff0000

08002b54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	460b      	mov	r3, r1
 8002b62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d006      	beq.n	8002b7e <I2C_MasterRequestWrite+0x2a>
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d003      	beq.n	8002b7e <I2C_MasterRequestWrite+0x2a>
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b7c:	d108      	bne.n	8002b90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	e00b      	b.n	8002ba8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	2b12      	cmp	r3, #18
 8002b96:	d107      	bne.n	8002ba8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f84f 	bl	8002c58 <I2C_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00d      	beq.n	8002bdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bce:	d103      	bne.n	8002bd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e035      	b.n	8002c48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002be4:	d108      	bne.n	8002bf8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002be6:	897b      	ldrh	r3, [r7, #10]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bf4:	611a      	str	r2, [r3, #16]
 8002bf6:	e01b      	b.n	8002c30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bf8:	897b      	ldrh	r3, [r7, #10]
 8002bfa:	11db      	asrs	r3, r3, #7
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f003 0306 	and.w	r3, r3, #6
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f063 030f 	orn	r3, r3, #15
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	490e      	ldr	r1, [pc, #56]	; (8002c50 <I2C_MasterRequestWrite+0xfc>)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f875 	bl	8002d06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e010      	b.n	8002c48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c26:	897b      	ldrh	r3, [r7, #10]
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	4907      	ldr	r1, [pc, #28]	; (8002c54 <I2C_MasterRequestWrite+0x100>)
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f865 	bl	8002d06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	00010008 	.word	0x00010008
 8002c54:	00010002 	.word	0x00010002

08002c58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c68:	e025      	b.n	8002cb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c70:	d021      	beq.n	8002cb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c72:	f7fe ff47 	bl	8001b04 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d302      	bcc.n	8002c88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d116      	bne.n	8002cb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f043 0220 	orr.w	r2, r3, #32
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e023      	b.n	8002cfe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d10d      	bne.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bf0c      	ite	eq
 8002cd2:	2301      	moveq	r3, #1
 8002cd4:	2300      	movne	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	e00c      	b.n	8002cf6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf0c      	ite	eq
 8002cee:	2301      	moveq	r3, #1
 8002cf0:	2300      	movne	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d0b6      	beq.n	8002c6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d14:	e051      	b.n	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d24:	d123      	bne.n	8002d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f043 0204 	orr.w	r2, r3, #4
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e046      	b.n	8002dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d021      	beq.n	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d76:	f7fe fec5 	bl	8001b04 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d302      	bcc.n	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d116      	bne.n	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f043 0220 	orr.w	r2, r3, #32
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e020      	b.n	8002dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d10c      	bne.n	8002dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	43da      	mvns	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	bf14      	ite	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	2300      	moveq	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	e00b      	b.n	8002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	43da      	mvns	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	4013      	ands	r3, r2
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d18d      	bne.n	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e10:	e02d      	b.n	8002e6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f878 	bl	8002f08 <I2C_IsAcknowledgeFailed>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e02d      	b.n	8002e7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d021      	beq.n	8002e6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2a:	f7fe fe6b 	bl	8001b04 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d302      	bcc.n	8002e40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d116      	bne.n	8002e6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f043 0220 	orr.w	r2, r3, #32
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e007      	b.n	8002e7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e78:	2b80      	cmp	r3, #128	; 0x80
 8002e7a:	d1ca      	bne.n	8002e12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e92:	e02d      	b.n	8002ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f837 	bl	8002f08 <I2C_IsAcknowledgeFailed>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e02d      	b.n	8002f00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eaa:	d021      	beq.n	8002ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eac:	f7fe fe2a 	bl	8001b04 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d302      	bcc.n	8002ec2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d116      	bne.n	8002ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	f043 0220 	orr.w	r2, r3, #32
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e007      	b.n	8002f00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d1ca      	bne.n	8002e94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1e:	d11b      	bne.n	8002f58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	f043 0204 	orr.w	r2, r3, #4
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e272      	b.n	800345c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 8087 	beq.w	8003092 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f84:	4b92      	ldr	r3, [pc, #584]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d00c      	beq.n	8002faa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f90:	4b8f      	ldr	r3, [pc, #572]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d112      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x5e>
 8002f9c:	4b8c      	ldr	r3, [pc, #560]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa8:	d10b      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002faa:	4b89      	ldr	r3, [pc, #548]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d06c      	beq.n	8003090 <HAL_RCC_OscConfig+0x12c>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d168      	bne.n	8003090 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e24c      	b.n	800345c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x76>
 8002fcc:	4b80      	ldr	r3, [pc, #512]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a7f      	ldr	r2, [pc, #508]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	e02e      	b.n	8003038 <HAL_RCC_OscConfig+0xd4>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x98>
 8002fe2:	4b7b      	ldr	r3, [pc, #492]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a7a      	ldr	r2, [pc, #488]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	4b78      	ldr	r3, [pc, #480]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a77      	ldr	r2, [pc, #476]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e01d      	b.n	8003038 <HAL_RCC_OscConfig+0xd4>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0xbc>
 8003006:	4b72      	ldr	r3, [pc, #456]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a71      	ldr	r2, [pc, #452]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 800300c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	4b6f      	ldr	r3, [pc, #444]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a6e      	ldr	r2, [pc, #440]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8003018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	e00b      	b.n	8003038 <HAL_RCC_OscConfig+0xd4>
 8003020:	4b6b      	ldr	r3, [pc, #428]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a6a      	ldr	r2, [pc, #424]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8003026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	4b68      	ldr	r3, [pc, #416]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a67      	ldr	r2, [pc, #412]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8003032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003036:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d013      	beq.n	8003068 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003040:	f7fe fd60 	bl	8001b04 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003048:	f7fe fd5c 	bl	8001b04 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e200      	b.n	800345c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305a:	4b5d      	ldr	r3, [pc, #372]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0xe4>
 8003066:	e014      	b.n	8003092 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fe fd4c 	bl	8001b04 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003070:	f7fe fd48 	bl	8001b04 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e1ec      	b.n	800345c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003082:	4b53      	ldr	r3, [pc, #332]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x10c>
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d063      	beq.n	8003166 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800309e:	4b4c      	ldr	r3, [pc, #304]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00b      	beq.n	80030c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030aa:	4b49      	ldr	r3, [pc, #292]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d11c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x18c>
 80030b6:	4b46      	ldr	r3, [pc, #280]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d116      	bne.n	80030f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c2:	4b43      	ldr	r3, [pc, #268]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_RCC_OscConfig+0x176>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d001      	beq.n	80030da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e1c0      	b.n	800345c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030da:	4b3d      	ldr	r3, [pc, #244]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4939      	ldr	r1, [pc, #228]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ee:	e03a      	b.n	8003166 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d020      	beq.n	800313a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f8:	4b36      	ldr	r3, [pc, #216]	; (80031d4 <HAL_RCC_OscConfig+0x270>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe fd01 	bl	8001b04 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003106:	f7fe fcfd 	bl	8001b04 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e1a1      	b.n	800345c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003118:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003124:	4b2a      	ldr	r3, [pc, #168]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4927      	ldr	r1, [pc, #156]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 8003134:	4313      	orrs	r3, r2
 8003136:	600b      	str	r3, [r1, #0]
 8003138:	e015      	b.n	8003166 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313a:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <HAL_RCC_OscConfig+0x270>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe fce0 	bl	8001b04 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003148:	f7fe fcdc 	bl	8001b04 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e180      	b.n	800345c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315a:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d03a      	beq.n	80031e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d019      	beq.n	80031ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317a:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <HAL_RCC_OscConfig+0x274>)
 800317c:	2201      	movs	r2, #1
 800317e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003180:	f7fe fcc0 	bl	8001b04 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003188:	f7fe fcbc 	bl	8001b04 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e160      	b.n	800345c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319a:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <HAL_RCC_OscConfig+0x26c>)
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031a6:	2001      	movs	r0, #1
 80031a8:	f000 fac4 	bl	8003734 <RCC_Delay>
 80031ac:	e01c      	b.n	80031e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_RCC_OscConfig+0x274>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b4:	f7fe fca6 	bl	8001b04 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ba:	e00f      	b.n	80031dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031bc:	f7fe fca2 	bl	8001b04 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d908      	bls.n	80031dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e146      	b.n	800345c <HAL_RCC_OscConfig+0x4f8>
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000
 80031d4:	42420000 	.word	0x42420000
 80031d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031dc:	4b92      	ldr	r3, [pc, #584]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e9      	bne.n	80031bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80a6 	beq.w	8003342 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f6:	2300      	movs	r3, #0
 80031f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fa:	4b8b      	ldr	r3, [pc, #556]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10d      	bne.n	8003222 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	4b88      	ldr	r3, [pc, #544]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	4a87      	ldr	r2, [pc, #540]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 800320c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003210:	61d3      	str	r3, [r2, #28]
 8003212:	4b85      	ldr	r3, [pc, #532]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321e:	2301      	movs	r3, #1
 8003220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003222:	4b82      	ldr	r3, [pc, #520]	; (800342c <HAL_RCC_OscConfig+0x4c8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322a:	2b00      	cmp	r3, #0
 800322c:	d118      	bne.n	8003260 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800322e:	4b7f      	ldr	r3, [pc, #508]	; (800342c <HAL_RCC_OscConfig+0x4c8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a7e      	ldr	r2, [pc, #504]	; (800342c <HAL_RCC_OscConfig+0x4c8>)
 8003234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323a:	f7fe fc63 	bl	8001b04 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003242:	f7fe fc5f 	bl	8001b04 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b64      	cmp	r3, #100	; 0x64
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e103      	b.n	800345c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003254:	4b75      	ldr	r3, [pc, #468]	; (800342c <HAL_RCC_OscConfig+0x4c8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d106      	bne.n	8003276 <HAL_RCC_OscConfig+0x312>
 8003268:	4b6f      	ldr	r3, [pc, #444]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	4a6e      	ldr	r2, [pc, #440]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6213      	str	r3, [r2, #32]
 8003274:	e02d      	b.n	80032d2 <HAL_RCC_OscConfig+0x36e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0x334>
 800327e:	4b6a      	ldr	r3, [pc, #424]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	4a69      	ldr	r2, [pc, #420]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	6213      	str	r3, [r2, #32]
 800328a:	4b67      	ldr	r3, [pc, #412]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	4a66      	ldr	r2, [pc, #408]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 8003290:	f023 0304 	bic.w	r3, r3, #4
 8003294:	6213      	str	r3, [r2, #32]
 8003296:	e01c      	b.n	80032d2 <HAL_RCC_OscConfig+0x36e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b05      	cmp	r3, #5
 800329e:	d10c      	bne.n	80032ba <HAL_RCC_OscConfig+0x356>
 80032a0:	4b61      	ldr	r3, [pc, #388]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	4a60      	ldr	r2, [pc, #384]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	f043 0304 	orr.w	r3, r3, #4
 80032aa:	6213      	str	r3, [r2, #32]
 80032ac:	4b5e      	ldr	r3, [pc, #376]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	4a5d      	ldr	r2, [pc, #372]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	6213      	str	r3, [r2, #32]
 80032b8:	e00b      	b.n	80032d2 <HAL_RCC_OscConfig+0x36e>
 80032ba:	4b5b      	ldr	r3, [pc, #364]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	4a5a      	ldr	r2, [pc, #360]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	6213      	str	r3, [r2, #32]
 80032c6:	4b58      	ldr	r3, [pc, #352]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	4a57      	ldr	r2, [pc, #348]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 80032cc:	f023 0304 	bic.w	r3, r3, #4
 80032d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d015      	beq.n	8003306 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032da:	f7fe fc13 	bl	8001b04 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f7fe fc0f 	bl	8001b04 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e0b1      	b.n	800345c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f8:	4b4b      	ldr	r3, [pc, #300]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0ee      	beq.n	80032e2 <HAL_RCC_OscConfig+0x37e>
 8003304:	e014      	b.n	8003330 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003306:	f7fe fbfd 	bl	8001b04 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330c:	e00a      	b.n	8003324 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330e:	f7fe fbf9 	bl	8001b04 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f241 3288 	movw	r2, #5000	; 0x1388
 800331c:	4293      	cmp	r3, r2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e09b      	b.n	800345c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003324:	4b40      	ldr	r3, [pc, #256]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ee      	bne.n	800330e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003330:	7dfb      	ldrb	r3, [r7, #23]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d105      	bne.n	8003342 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003336:	4b3c      	ldr	r3, [pc, #240]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	4a3b      	ldr	r2, [pc, #236]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 800333c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003340:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 8087 	beq.w	800345a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800334c:	4b36      	ldr	r3, [pc, #216]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 030c 	and.w	r3, r3, #12
 8003354:	2b08      	cmp	r3, #8
 8003356:	d061      	beq.n	800341c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d146      	bne.n	80033ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003360:	4b33      	ldr	r3, [pc, #204]	; (8003430 <HAL_RCC_OscConfig+0x4cc>)
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7fe fbcd 	bl	8001b04 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336e:	f7fe fbc9 	bl	8001b04 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e06d      	b.n	800345c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003380:	4b29      	ldr	r3, [pc, #164]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f0      	bne.n	800336e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003394:	d108      	bne.n	80033a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003396:	4b24      	ldr	r3, [pc, #144]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	4921      	ldr	r1, [pc, #132]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033a8:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a19      	ldr	r1, [r3, #32]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	430b      	orrs	r3, r1
 80033ba:	491b      	ldr	r1, [pc, #108]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c0:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <HAL_RCC_OscConfig+0x4cc>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c6:	f7fe fb9d 	bl	8001b04 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ce:	f7fe fb99 	bl	8001b04 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e03d      	b.n	800345c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033e0:	4b11      	ldr	r3, [pc, #68]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCC_OscConfig+0x46a>
 80033ec:	e035      	b.n	800345a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ee:	4b10      	ldr	r3, [pc, #64]	; (8003430 <HAL_RCC_OscConfig+0x4cc>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f4:	f7fe fb86 	bl	8001b04 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fe fb82 	bl	8001b04 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e026      	b.n	800345c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800340e:	4b06      	ldr	r3, [pc, #24]	; (8003428 <HAL_RCC_OscConfig+0x4c4>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x498>
 800341a:	e01e      	b.n	800345a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d107      	bne.n	8003434 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e019      	b.n	800345c <HAL_RCC_OscConfig+0x4f8>
 8003428:	40021000 	.word	0x40021000
 800342c:	40007000 	.word	0x40007000
 8003430:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_OscConfig+0x500>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	429a      	cmp	r2, r3
 8003446:	d106      	bne.n	8003456 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40021000 	.word	0x40021000

08003468 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0d0      	b.n	800361e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800347c:	4b6a      	ldr	r3, [pc, #424]	; (8003628 <HAL_RCC_ClockConfig+0x1c0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d910      	bls.n	80034ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348a:	4b67      	ldr	r3, [pc, #412]	; (8003628 <HAL_RCC_ClockConfig+0x1c0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 0207 	bic.w	r2, r3, #7
 8003492:	4965      	ldr	r1, [pc, #404]	; (8003628 <HAL_RCC_ClockConfig+0x1c0>)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	4313      	orrs	r3, r2
 8003498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349a:	4b63      	ldr	r3, [pc, #396]	; (8003628 <HAL_RCC_ClockConfig+0x1c0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d001      	beq.n	80034ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0b8      	b.n	800361e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d020      	beq.n	80034fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c4:	4b59      	ldr	r3, [pc, #356]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	4a58      	ldr	r2, [pc, #352]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 80034ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034dc:	4b53      	ldr	r3, [pc, #332]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	4a52      	ldr	r2, [pc, #328]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 80034e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e8:	4b50      	ldr	r3, [pc, #320]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	494d      	ldr	r1, [pc, #308]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d040      	beq.n	8003588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d107      	bne.n	800351e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350e:	4b47      	ldr	r3, [pc, #284]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d115      	bne.n	8003546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e07f      	b.n	800361e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d107      	bne.n	8003536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003526:	4b41      	ldr	r3, [pc, #260]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d109      	bne.n	8003546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e073      	b.n	800361e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003536:	4b3d      	ldr	r3, [pc, #244]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e06b      	b.n	800361e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003546:	4b39      	ldr	r3, [pc, #228]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f023 0203 	bic.w	r2, r3, #3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	4936      	ldr	r1, [pc, #216]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 8003554:	4313      	orrs	r3, r2
 8003556:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003558:	f7fe fad4 	bl	8001b04 <HAL_GetTick>
 800355c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355e:	e00a      	b.n	8003576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003560:	f7fe fad0 	bl	8001b04 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f241 3288 	movw	r2, #5000	; 0x1388
 800356e:	4293      	cmp	r3, r2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e053      	b.n	800361e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003576:	4b2d      	ldr	r3, [pc, #180]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 020c 	and.w	r2, r3, #12
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	429a      	cmp	r2, r3
 8003586:	d1eb      	bne.n	8003560 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003588:	4b27      	ldr	r3, [pc, #156]	; (8003628 <HAL_RCC_ClockConfig+0x1c0>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d210      	bcs.n	80035b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003596:	4b24      	ldr	r3, [pc, #144]	; (8003628 <HAL_RCC_ClockConfig+0x1c0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 0207 	bic.w	r2, r3, #7
 800359e:	4922      	ldr	r1, [pc, #136]	; (8003628 <HAL_RCC_ClockConfig+0x1c0>)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a6:	4b20      	ldr	r3, [pc, #128]	; (8003628 <HAL_RCC_ClockConfig+0x1c0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e032      	b.n	800361e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c4:	4b19      	ldr	r3, [pc, #100]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4916      	ldr	r1, [pc, #88]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d009      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035e2:	4b12      	ldr	r3, [pc, #72]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	490e      	ldr	r1, [pc, #56]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035f6:	f000 f821 	bl	800363c <HAL_RCC_GetSysClockFreq>
 80035fa:	4602      	mov	r2, r0
 80035fc:	4b0b      	ldr	r3, [pc, #44]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	490a      	ldr	r1, [pc, #40]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 8003608:	5ccb      	ldrb	r3, [r1, r3]
 800360a:	fa22 f303 	lsr.w	r3, r2, r3
 800360e:	4a09      	ldr	r2, [pc, #36]	; (8003634 <HAL_RCC_ClockConfig+0x1cc>)
 8003610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003612:	4b09      	ldr	r3, [pc, #36]	; (8003638 <HAL_RCC_ClockConfig+0x1d0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fe fa32 	bl	8001a80 <HAL_InitTick>

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40022000 	.word	0x40022000
 800362c:	40021000 	.word	0x40021000
 8003630:	080057f8 	.word	0x080057f8
 8003634:	2000000c 	.word	0x2000000c
 8003638:	20000010 	.word	0x20000010

0800363c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800363c:	b490      	push	{r4, r7}
 800363e:	b08a      	sub	sp, #40	; 0x28
 8003640:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003642:	4b29      	ldr	r3, [pc, #164]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003644:	1d3c      	adds	r4, r7, #4
 8003646:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800364c:	f240 2301 	movw	r3, #513	; 0x201
 8003650:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	2300      	movs	r3, #0
 8003658:	61bb      	str	r3, [r7, #24]
 800365a:	2300      	movs	r3, #0
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003666:	4b21      	ldr	r3, [pc, #132]	; (80036ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b04      	cmp	r3, #4
 8003674:	d002      	beq.n	800367c <HAL_RCC_GetSysClockFreq+0x40>
 8003676:	2b08      	cmp	r3, #8
 8003678:	d003      	beq.n	8003682 <HAL_RCC_GetSysClockFreq+0x46>
 800367a:	e02b      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800367c:	4b1c      	ldr	r3, [pc, #112]	; (80036f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800367e:	623b      	str	r3, [r7, #32]
      break;
 8003680:	e02b      	b.n	80036da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	0c9b      	lsrs	r3, r3, #18
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	3328      	adds	r3, #40	; 0x28
 800368c:	443b      	add	r3, r7
 800368e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003692:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d012      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800369e:	4b13      	ldr	r3, [pc, #76]	; (80036ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	0c5b      	lsrs	r3, r3, #17
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	3328      	adds	r3, #40	; 0x28
 80036aa:	443b      	add	r3, r7
 80036ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	4a0e      	ldr	r2, [pc, #56]	; (80036f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036b6:	fb03 f202 	mul.w	r2, r3, r2
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
 80036c2:	e004      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	4a0b      	ldr	r2, [pc, #44]	; (80036f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036c8:	fb02 f303 	mul.w	r3, r2, r3
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	623b      	str	r3, [r7, #32]
      break;
 80036d2:	e002      	b.n	80036da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036d6:	623b      	str	r3, [r7, #32]
      break;
 80036d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036da:	6a3b      	ldr	r3, [r7, #32]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3728      	adds	r7, #40	; 0x28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc90      	pop	{r4, r7}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	0800507c 	.word	0x0800507c
 80036ec:	40021000 	.word	0x40021000
 80036f0:	007a1200 	.word	0x007a1200
 80036f4:	003d0900 	.word	0x003d0900

080036f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036fc:	4b02      	ldr	r3, [pc, #8]	; (8003708 <HAL_RCC_GetHCLKFreq+0x10>)
 80036fe:	681b      	ldr	r3, [r3, #0]
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr
 8003708:	2000000c 	.word	0x2000000c

0800370c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003710:	f7ff fff2 	bl	80036f8 <HAL_RCC_GetHCLKFreq>
 8003714:	4602      	mov	r2, r0
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	0a1b      	lsrs	r3, r3, #8
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	4903      	ldr	r1, [pc, #12]	; (8003730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003722:	5ccb      	ldrb	r3, [r1, r3]
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003728:	4618      	mov	r0, r3
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40021000 	.word	0x40021000
 8003730:	08005808 	.word	0x08005808

08003734 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800373c:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <RCC_Delay+0x34>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a0a      	ldr	r2, [pc, #40]	; (800376c <RCC_Delay+0x38>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	0a5b      	lsrs	r3, r3, #9
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	fb02 f303 	mul.w	r3, r2, r3
 800374e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003750:	bf00      	nop
  }
  while (Delay --);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1e5a      	subs	r2, r3, #1
 8003756:	60fa      	str	r2, [r7, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f9      	bne.n	8003750 <RCC_Delay+0x1c>
}
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	2000000c 	.word	0x2000000c
 800376c:	10624dd3 	.word	0x10624dd3

08003770 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d07d      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800378c:	2300      	movs	r3, #0
 800378e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003790:	4b4f      	ldr	r3, [pc, #316]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10d      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379c:	4b4c      	ldr	r3, [pc, #304]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	4a4b      	ldr	r2, [pc, #300]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a6:	61d3      	str	r3, [r2, #28]
 80037a8:	4b49      	ldr	r3, [pc, #292]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b4:	2301      	movs	r3, #1
 80037b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b8:	4b46      	ldr	r3, [pc, #280]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d118      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c4:	4b43      	ldr	r3, [pc, #268]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a42      	ldr	r2, [pc, #264]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d0:	f7fe f998 	bl	8001b04 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d6:	e008      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d8:	f7fe f994 	bl	8001b04 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e06d      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ea:	4b3a      	ldr	r3, [pc, #232]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037f6:	4b36      	ldr	r3, [pc, #216]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d02e      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	429a      	cmp	r2, r3
 8003812:	d027      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003814:	4b2e      	ldr	r3, [pc, #184]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800381e:	4b2e      	ldr	r3, [pc, #184]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003820:	2201      	movs	r2, #1
 8003822:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003824:	4b2c      	ldr	r3, [pc, #176]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800382a:	4a29      	ldr	r2, [pc, #164]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d014      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7fe f963 	bl	8001b04 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003840:	e00a      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fe f95f 	bl	8001b04 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003850:	4293      	cmp	r3, r2
 8003852:	d901      	bls.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e036      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003858:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ee      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003864:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4917      	ldr	r1, [pc, #92]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003872:	4313      	orrs	r3, r2
 8003874:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d105      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387c:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	4a13      	ldr	r2, [pc, #76]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003886:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003894:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	490b      	ldr	r1, [pc, #44]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038b2:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	4904      	ldr	r1, [pc, #16]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40007000 	.word	0x40007000
 80038d8:	42420440 	.word	0x42420440

080038dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e041      	b.n	8003972 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd ff92 	bl	800182c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3304      	adds	r3, #4
 8003918:	4619      	mov	r1, r3
 800391a:	4610      	mov	r0, r2
 800391c:	f000 fbd4 	bl	80040c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e041      	b.n	8003a10 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d106      	bne.n	80039a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f839 	bl	8003a18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2202      	movs	r2, #2
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3304      	adds	r3, #4
 80039b6:	4619      	mov	r1, r3
 80039b8:	4610      	mov	r0, r2
 80039ba:	f000 fb85 	bl	80040c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr
	...

08003a2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d109      	bne.n	8003a50 <HAL_TIM_PWM_Start+0x24>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	bf14      	ite	ne
 8003a48:	2301      	movne	r3, #1
 8003a4a:	2300      	moveq	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e022      	b.n	8003a96 <HAL_TIM_PWM_Start+0x6a>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d109      	bne.n	8003a6a <HAL_TIM_PWM_Start+0x3e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	bf14      	ite	ne
 8003a62:	2301      	movne	r3, #1
 8003a64:	2300      	moveq	r3, #0
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	e015      	b.n	8003a96 <HAL_TIM_PWM_Start+0x6a>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d109      	bne.n	8003a84 <HAL_TIM_PWM_Start+0x58>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	bf14      	ite	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	2300      	moveq	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	e008      	b.n	8003a96 <HAL_TIM_PWM_Start+0x6a>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e059      	b.n	8003b52 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d104      	bne.n	8003aae <HAL_TIM_PWM_Start+0x82>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aac:	e013      	b.n	8003ad6 <HAL_TIM_PWM_Start+0xaa>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d104      	bne.n	8003abe <HAL_TIM_PWM_Start+0x92>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003abc:	e00b      	b.n	8003ad6 <HAL_TIM_PWM_Start+0xaa>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d104      	bne.n	8003ace <HAL_TIM_PWM_Start+0xa2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003acc:	e003      	b.n	8003ad6 <HAL_TIM_PWM_Start+0xaa>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2201      	movs	r2, #1
 8003adc:	6839      	ldr	r1, [r7, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fd68 	bl	80045b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1c      	ldr	r2, [pc, #112]	; (8003b5c <HAL_TIM_PWM_Start+0x130>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d107      	bne.n	8003afe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003afc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <HAL_TIM_PWM_Start+0x130>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d009      	beq.n	8003b1c <HAL_TIM_PWM_Start+0xf0>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b10:	d004      	beq.n	8003b1c <HAL_TIM_PWM_Start+0xf0>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a12      	ldr	r2, [pc, #72]	; (8003b60 <HAL_TIM_PWM_Start+0x134>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d111      	bne.n	8003b40 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b06      	cmp	r3, #6
 8003b2c:	d010      	beq.n	8003b50 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0201 	orr.w	r2, r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3e:	e007      	b.n	8003b50 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40012c00 	.word	0x40012c00
 8003b60:	40000400 	.word	0x40000400

08003b64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e093      	b.n	8003ca0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d106      	bne.n	8003b92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7fd fe69 	bl	8001864 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2202      	movs	r2, #2
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ba8:	f023 0307 	bic.w	r3, r3, #7
 8003bac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4610      	mov	r0, r2
 8003bba:	f000 fa85 	bl	80040c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be6:	f023 0303 	bic.w	r3, r3, #3
 8003bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003c04:	f023 030c 	bic.w	r3, r3, #12
 8003c08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	4313      	orrs	r3, r2
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	011a      	lsls	r2, r3, #4
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	031b      	lsls	r3, r3, #12
 8003c34:	4313      	orrs	r3, r2
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003c42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cb8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cc0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cc8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003cd0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d110      	bne.n	8003cfa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d102      	bne.n	8003ce4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cde:	7b7b      	ldrb	r3, [r7, #13]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d001      	beq.n	8003ce8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e069      	b.n	8003dbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cf8:	e031      	b.n	8003d5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d110      	bne.n	8003d22 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d00:	7bbb      	ldrb	r3, [r7, #14]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d102      	bne.n	8003d0c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d06:	7b3b      	ldrb	r3, [r7, #12]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d001      	beq.n	8003d10 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e055      	b.n	8003dbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d20:	e01d      	b.n	8003d5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d108      	bne.n	8003d3a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d28:	7bbb      	ldrb	r3, [r7, #14]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d105      	bne.n	8003d3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d2e:	7b7b      	ldrb	r3, [r7, #13]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d102      	bne.n	8003d3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d34:	7b3b      	ldrb	r3, [r7, #12]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d001      	beq.n	8003d3e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e03e      	b.n	8003dbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2202      	movs	r2, #2
 8003d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2202      	movs	r2, #2
 8003d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_TIM_Encoder_Start+0xc4>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d008      	beq.n	8003d7c <HAL_TIM_Encoder_Start+0xd4>
 8003d6a:	e00f      	b.n	8003d8c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2201      	movs	r2, #1
 8003d72:	2100      	movs	r1, #0
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fc1d 	bl	80045b4 <TIM_CCxChannelCmd>
      break;
 8003d7a:	e016      	b.n	8003daa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2201      	movs	r2, #1
 8003d82:	2104      	movs	r1, #4
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fc15 	bl	80045b4 <TIM_CCxChannelCmd>
      break;
 8003d8a:	e00e      	b.n	8003daa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2201      	movs	r2, #1
 8003d92:	2100      	movs	r1, #0
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fc0d 	bl	80045b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	2104      	movs	r1, #4
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fc06 	bl	80045b4 <TIM_CCxChannelCmd>
      break;
 8003da8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0201 	orr.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e0ac      	b.n	8003f38 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b0c      	cmp	r3, #12
 8003dea:	f200 809f 	bhi.w	8003f2c <HAL_TIM_PWM_ConfigChannel+0x168>
 8003dee:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e29 	.word	0x08003e29
 8003df8:	08003f2d 	.word	0x08003f2d
 8003dfc:	08003f2d 	.word	0x08003f2d
 8003e00:	08003f2d 	.word	0x08003f2d
 8003e04:	08003e69 	.word	0x08003e69
 8003e08:	08003f2d 	.word	0x08003f2d
 8003e0c:	08003f2d 	.word	0x08003f2d
 8003e10:	08003f2d 	.word	0x08003f2d
 8003e14:	08003eab 	.word	0x08003eab
 8003e18:	08003f2d 	.word	0x08003f2d
 8003e1c:	08003f2d 	.word	0x08003f2d
 8003e20:	08003f2d 	.word	0x08003f2d
 8003e24:	08003eeb 	.word	0x08003eeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 f9a2 	bl	8004178 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0208 	orr.w	r2, r2, #8
 8003e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0204 	bic.w	r2, r2, #4
 8003e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6999      	ldr	r1, [r3, #24]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	691a      	ldr	r2, [r3, #16]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	619a      	str	r2, [r3, #24]
      break;
 8003e66:	e062      	b.n	8003f2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 f9e8 	bl	8004244 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6999      	ldr	r1, [r3, #24]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	021a      	lsls	r2, r3, #8
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	619a      	str	r2, [r3, #24]
      break;
 8003ea8:	e041      	b.n	8003f2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68b9      	ldr	r1, [r7, #8]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fa31 	bl	8004318 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0208 	orr.w	r2, r2, #8
 8003ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0204 	bic.w	r2, r2, #4
 8003ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69d9      	ldr	r1, [r3, #28]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	61da      	str	r2, [r3, #28]
      break;
 8003ee8:	e021      	b.n	8003f2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68b9      	ldr	r1, [r7, #8]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fa7b 	bl	80043ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69da      	ldr	r2, [r3, #28]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69d9      	ldr	r1, [r3, #28]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	021a      	lsls	r2, r3, #8
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	61da      	str	r2, [r3, #28]
      break;
 8003f2a:	e000      	b.n	8003f2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003f2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_TIM_ConfigClockSource+0x18>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e0b3      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x180>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f90:	d03e      	beq.n	8004010 <HAL_TIM_ConfigClockSource+0xd0>
 8003f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f96:	f200 8087 	bhi.w	80040a8 <HAL_TIM_ConfigClockSource+0x168>
 8003f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9e:	f000 8085 	beq.w	80040ac <HAL_TIM_ConfigClockSource+0x16c>
 8003fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa6:	d87f      	bhi.n	80040a8 <HAL_TIM_ConfigClockSource+0x168>
 8003fa8:	2b70      	cmp	r3, #112	; 0x70
 8003faa:	d01a      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0xa2>
 8003fac:	2b70      	cmp	r3, #112	; 0x70
 8003fae:	d87b      	bhi.n	80040a8 <HAL_TIM_ConfigClockSource+0x168>
 8003fb0:	2b60      	cmp	r3, #96	; 0x60
 8003fb2:	d050      	beq.n	8004056 <HAL_TIM_ConfigClockSource+0x116>
 8003fb4:	2b60      	cmp	r3, #96	; 0x60
 8003fb6:	d877      	bhi.n	80040a8 <HAL_TIM_ConfigClockSource+0x168>
 8003fb8:	2b50      	cmp	r3, #80	; 0x50
 8003fba:	d03c      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0xf6>
 8003fbc:	2b50      	cmp	r3, #80	; 0x50
 8003fbe:	d873      	bhi.n	80040a8 <HAL_TIM_ConfigClockSource+0x168>
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d058      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0x136>
 8003fc4:	2b40      	cmp	r3, #64	; 0x40
 8003fc6:	d86f      	bhi.n	80040a8 <HAL_TIM_ConfigClockSource+0x168>
 8003fc8:	2b30      	cmp	r3, #48	; 0x30
 8003fca:	d064      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0x156>
 8003fcc:	2b30      	cmp	r3, #48	; 0x30
 8003fce:	d86b      	bhi.n	80040a8 <HAL_TIM_ConfigClockSource+0x168>
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d060      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0x156>
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d867      	bhi.n	80040a8 <HAL_TIM_ConfigClockSource+0x168>
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d05c      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0x156>
 8003fdc:	2b10      	cmp	r3, #16
 8003fde:	d05a      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003fe0:	e062      	b.n	80040a8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	6899      	ldr	r1, [r3, #8]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f000 fac0 	bl	8004576 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004004:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	609a      	str	r2, [r3, #8]
      break;
 800400e:	e04e      	b.n	80040ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	6899      	ldr	r1, [r3, #8]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f000 faa9 	bl	8004576 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004032:	609a      	str	r2, [r3, #8]
      break;
 8004034:	e03b      	b.n	80040ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	6859      	ldr	r1, [r3, #4]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	461a      	mov	r2, r3
 8004044:	f000 fa20 	bl	8004488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2150      	movs	r1, #80	; 0x50
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fa77 	bl	8004542 <TIM_ITRx_SetConfig>
      break;
 8004054:	e02b      	b.n	80040ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6859      	ldr	r1, [r3, #4]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	461a      	mov	r2, r3
 8004064:	f000 fa3e 	bl	80044e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2160      	movs	r1, #96	; 0x60
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fa67 	bl	8004542 <TIM_ITRx_SetConfig>
      break;
 8004074:	e01b      	b.n	80040ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	6859      	ldr	r1, [r3, #4]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	461a      	mov	r2, r3
 8004084:	f000 fa00 	bl	8004488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2140      	movs	r1, #64	; 0x40
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fa57 	bl	8004542 <TIM_ITRx_SetConfig>
      break;
 8004094:	e00b      	b.n	80040ae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f000 fa4e 	bl	8004542 <TIM_ITRx_SetConfig>
        break;
 80040a6:	e002      	b.n	80040ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040a8:	bf00      	nop
 80040aa:	e000      	b.n	80040ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a25      	ldr	r2, [pc, #148]	; (8004170 <TIM_Base_SetConfig+0xa8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d007      	beq.n	80040f0 <TIM_Base_SetConfig+0x28>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e6:	d003      	beq.n	80040f0 <TIM_Base_SetConfig+0x28>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a22      	ldr	r2, [pc, #136]	; (8004174 <TIM_Base_SetConfig+0xac>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d108      	bne.n	8004102 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a1a      	ldr	r2, [pc, #104]	; (8004170 <TIM_Base_SetConfig+0xa8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d007      	beq.n	800411a <TIM_Base_SetConfig+0x52>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004110:	d003      	beq.n	800411a <TIM_Base_SetConfig+0x52>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a17      	ldr	r2, [pc, #92]	; (8004174 <TIM_Base_SetConfig+0xac>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d108      	bne.n	800412c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a07      	ldr	r2, [pc, #28]	; (8004170 <TIM_Base_SetConfig+0xa8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d103      	bne.n	8004160 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	615a      	str	r2, [r3, #20]
}
 8004166:	bf00      	nop
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr
 8004170:	40012c00 	.word	0x40012c00
 8004174:	40000400 	.word	0x40000400

08004178 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	f023 0201 	bic.w	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0303 	bic.w	r3, r3, #3
 80041ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f023 0302 	bic.w	r3, r3, #2
 80041c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a1c      	ldr	r2, [pc, #112]	; (8004240 <TIM_OC1_SetConfig+0xc8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d10c      	bne.n	80041ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 0308 	bic.w	r3, r3, #8
 80041da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f023 0304 	bic.w	r3, r3, #4
 80041ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a13      	ldr	r2, [pc, #76]	; (8004240 <TIM_OC1_SetConfig+0xc8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d111      	bne.n	800421a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	621a      	str	r2, [r3, #32]
}
 8004234:	bf00      	nop
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40012c00 	.word	0x40012c00

08004244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f023 0210 	bic.w	r2, r3, #16
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	021b      	lsls	r3, r3, #8
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f023 0320 	bic.w	r3, r3, #32
 800428e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a1d      	ldr	r2, [pc, #116]	; (8004314 <TIM_OC2_SetConfig+0xd0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d10d      	bne.n	80042c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a14      	ldr	r2, [pc, #80]	; (8004314 <TIM_OC2_SetConfig+0xd0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d113      	bne.n	80042f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	40012c00 	.word	0x40012c00

08004318 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0303 	bic.w	r3, r3, #3
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a1d      	ldr	r2, [pc, #116]	; (80043e8 <TIM_OC3_SetConfig+0xd0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d10d      	bne.n	8004392 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800437c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a14      	ldr	r2, [pc, #80]	; (80043e8 <TIM_OC3_SetConfig+0xd0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d113      	bne.n	80043c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	621a      	str	r2, [r3, #32]
}
 80043dc:	bf00      	nop
 80043de:	371c      	adds	r7, #28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40012c00 	.word	0x40012c00

080043ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800441a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004436:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	031b      	lsls	r3, r3, #12
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	4313      	orrs	r3, r2
 8004442:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a0f      	ldr	r2, [pc, #60]	; (8004484 <TIM_OC4_SetConfig+0x98>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d109      	bne.n	8004460 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	019b      	lsls	r3, r3, #6
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	621a      	str	r2, [r3, #32]
}
 800447a:	bf00      	nop
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr
 8004484:	40012c00 	.word	0x40012c00

08004488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f023 0201 	bic.w	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f023 030a 	bic.w	r3, r3, #10
 80044c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	621a      	str	r2, [r3, #32]
}
 80044da:	bf00      	nop
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr

080044e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	f023 0210 	bic.w	r2, r3, #16
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800450e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	031b      	lsls	r3, r3, #12
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004520:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	621a      	str	r2, [r3, #32]
}
 8004538:	bf00      	nop
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr

08004542 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004542:	b480      	push	{r7}
 8004544:	b085      	sub	sp, #20
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004558:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	f043 0307 	orr.w	r3, r3, #7
 8004564:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	609a      	str	r2, [r3, #8]
}
 800456c:	bf00      	nop
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr

08004576 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004576:	b480      	push	{r7}
 8004578:	b087      	sub	sp, #28
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	607a      	str	r2, [r7, #4]
 8004582:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004590:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	021a      	lsls	r2, r3, #8
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	431a      	orrs	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	4313      	orrs	r3, r2
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	609a      	str	r2, [r3, #8]
}
 80045aa:	bf00      	nop
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr

080045b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 031f 	and.w	r3, r3, #31
 80045c6:	2201      	movs	r2, #1
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a1a      	ldr	r2, [r3, #32]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	401a      	ands	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a1a      	ldr	r2, [r3, #32]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 031f 	and.w	r3, r3, #31
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ec:	431a      	orrs	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	621a      	str	r2, [r3, #32]
}
 80045f2:	bf00      	nop
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr

080045fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004610:	2302      	movs	r3, #2
 8004612:	e041      	b.n	8004698 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a14      	ldr	r2, [pc, #80]	; (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d009      	beq.n	800466c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004660:	d004      	beq.n	800466c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a10      	ldr	r2, [pc, #64]	; (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d10c      	bne.n	8004686 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004672:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	4313      	orrs	r3, r2
 800467c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40012c00 	.word	0x40012c00
 80046a8:	40000400 	.word	0x40000400

080046ac <__errno>:
 80046ac:	4b01      	ldr	r3, [pc, #4]	; (80046b4 <__errno+0x8>)
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20000018 	.word	0x20000018

080046b8 <__libc_init_array>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	2600      	movs	r6, #0
 80046bc:	4d0c      	ldr	r5, [pc, #48]	; (80046f0 <__libc_init_array+0x38>)
 80046be:	4c0d      	ldr	r4, [pc, #52]	; (80046f4 <__libc_init_array+0x3c>)
 80046c0:	1b64      	subs	r4, r4, r5
 80046c2:	10a4      	asrs	r4, r4, #2
 80046c4:	42a6      	cmp	r6, r4
 80046c6:	d109      	bne.n	80046dc <__libc_init_array+0x24>
 80046c8:	f000 fcae 	bl	8005028 <_init>
 80046cc:	2600      	movs	r6, #0
 80046ce:	4d0a      	ldr	r5, [pc, #40]	; (80046f8 <__libc_init_array+0x40>)
 80046d0:	4c0a      	ldr	r4, [pc, #40]	; (80046fc <__libc_init_array+0x44>)
 80046d2:	1b64      	subs	r4, r4, r5
 80046d4:	10a4      	asrs	r4, r4, #2
 80046d6:	42a6      	cmp	r6, r4
 80046d8:	d105      	bne.n	80046e6 <__libc_init_array+0x2e>
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e0:	4798      	blx	r3
 80046e2:	3601      	adds	r6, #1
 80046e4:	e7ee      	b.n	80046c4 <__libc_init_array+0xc>
 80046e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ea:	4798      	blx	r3
 80046ec:	3601      	adds	r6, #1
 80046ee:	e7f2      	b.n	80046d6 <__libc_init_array+0x1e>
 80046f0:	08005844 	.word	0x08005844
 80046f4:	08005844 	.word	0x08005844
 80046f8:	08005844 	.word	0x08005844
 80046fc:	08005848 	.word	0x08005848

08004700 <memset>:
 8004700:	4603      	mov	r3, r0
 8004702:	4402      	add	r2, r0
 8004704:	4293      	cmp	r3, r2
 8004706:	d100      	bne.n	800470a <memset+0xa>
 8004708:	4770      	bx	lr
 800470a:	f803 1b01 	strb.w	r1, [r3], #1
 800470e:	e7f9      	b.n	8004704 <memset+0x4>

08004710 <siprintf>:
 8004710:	b40e      	push	{r1, r2, r3}
 8004712:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004716:	b500      	push	{lr}
 8004718:	b09c      	sub	sp, #112	; 0x70
 800471a:	ab1d      	add	r3, sp, #116	; 0x74
 800471c:	9002      	str	r0, [sp, #8]
 800471e:	9006      	str	r0, [sp, #24]
 8004720:	9107      	str	r1, [sp, #28]
 8004722:	9104      	str	r1, [sp, #16]
 8004724:	4808      	ldr	r0, [pc, #32]	; (8004748 <siprintf+0x38>)
 8004726:	4909      	ldr	r1, [pc, #36]	; (800474c <siprintf+0x3c>)
 8004728:	f853 2b04 	ldr.w	r2, [r3], #4
 800472c:	9105      	str	r1, [sp, #20]
 800472e:	6800      	ldr	r0, [r0, #0]
 8004730:	a902      	add	r1, sp, #8
 8004732:	9301      	str	r3, [sp, #4]
 8004734:	f000 f87a 	bl	800482c <_svfiprintf_r>
 8004738:	2200      	movs	r2, #0
 800473a:	9b02      	ldr	r3, [sp, #8]
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	b01c      	add	sp, #112	; 0x70
 8004740:	f85d eb04 	ldr.w	lr, [sp], #4
 8004744:	b003      	add	sp, #12
 8004746:	4770      	bx	lr
 8004748:	20000018 	.word	0x20000018
 800474c:	ffff0208 	.word	0xffff0208

08004750 <strncpy>:
 8004750:	4603      	mov	r3, r0
 8004752:	b510      	push	{r4, lr}
 8004754:	3901      	subs	r1, #1
 8004756:	b132      	cbz	r2, 8004766 <strncpy+0x16>
 8004758:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800475c:	3a01      	subs	r2, #1
 800475e:	f803 4b01 	strb.w	r4, [r3], #1
 8004762:	2c00      	cmp	r4, #0
 8004764:	d1f7      	bne.n	8004756 <strncpy+0x6>
 8004766:	2100      	movs	r1, #0
 8004768:	441a      	add	r2, r3
 800476a:	4293      	cmp	r3, r2
 800476c:	d100      	bne.n	8004770 <strncpy+0x20>
 800476e:	bd10      	pop	{r4, pc}
 8004770:	f803 1b01 	strb.w	r1, [r3], #1
 8004774:	e7f9      	b.n	800476a <strncpy+0x1a>

08004776 <__ssputs_r>:
 8004776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800477a:	688e      	ldr	r6, [r1, #8]
 800477c:	4682      	mov	sl, r0
 800477e:	429e      	cmp	r6, r3
 8004780:	460c      	mov	r4, r1
 8004782:	4690      	mov	r8, r2
 8004784:	461f      	mov	r7, r3
 8004786:	d838      	bhi.n	80047fa <__ssputs_r+0x84>
 8004788:	898a      	ldrh	r2, [r1, #12]
 800478a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800478e:	d032      	beq.n	80047f6 <__ssputs_r+0x80>
 8004790:	6825      	ldr	r5, [r4, #0]
 8004792:	6909      	ldr	r1, [r1, #16]
 8004794:	3301      	adds	r3, #1
 8004796:	eba5 0901 	sub.w	r9, r5, r1
 800479a:	6965      	ldr	r5, [r4, #20]
 800479c:	444b      	add	r3, r9
 800479e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047a6:	106d      	asrs	r5, r5, #1
 80047a8:	429d      	cmp	r5, r3
 80047aa:	bf38      	it	cc
 80047ac:	461d      	movcc	r5, r3
 80047ae:	0553      	lsls	r3, r2, #21
 80047b0:	d531      	bpl.n	8004816 <__ssputs_r+0xa0>
 80047b2:	4629      	mov	r1, r5
 80047b4:	f000 fb6e 	bl	8004e94 <_malloc_r>
 80047b8:	4606      	mov	r6, r0
 80047ba:	b950      	cbnz	r0, 80047d2 <__ssputs_r+0x5c>
 80047bc:	230c      	movs	r3, #12
 80047be:	f04f 30ff 	mov.w	r0, #4294967295
 80047c2:	f8ca 3000 	str.w	r3, [sl]
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047cc:	81a3      	strh	r3, [r4, #12]
 80047ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d2:	464a      	mov	r2, r9
 80047d4:	6921      	ldr	r1, [r4, #16]
 80047d6:	f000 facd 	bl	8004d74 <memcpy>
 80047da:	89a3      	ldrh	r3, [r4, #12]
 80047dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e4:	81a3      	strh	r3, [r4, #12]
 80047e6:	6126      	str	r6, [r4, #16]
 80047e8:	444e      	add	r6, r9
 80047ea:	6026      	str	r6, [r4, #0]
 80047ec:	463e      	mov	r6, r7
 80047ee:	6165      	str	r5, [r4, #20]
 80047f0:	eba5 0509 	sub.w	r5, r5, r9
 80047f4:	60a5      	str	r5, [r4, #8]
 80047f6:	42be      	cmp	r6, r7
 80047f8:	d900      	bls.n	80047fc <__ssputs_r+0x86>
 80047fa:	463e      	mov	r6, r7
 80047fc:	4632      	mov	r2, r6
 80047fe:	4641      	mov	r1, r8
 8004800:	6820      	ldr	r0, [r4, #0]
 8004802:	f000 fac5 	bl	8004d90 <memmove>
 8004806:	68a3      	ldr	r3, [r4, #8]
 8004808:	2000      	movs	r0, #0
 800480a:	1b9b      	subs	r3, r3, r6
 800480c:	60a3      	str	r3, [r4, #8]
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	4433      	add	r3, r6
 8004812:	6023      	str	r3, [r4, #0]
 8004814:	e7db      	b.n	80047ce <__ssputs_r+0x58>
 8004816:	462a      	mov	r2, r5
 8004818:	f000 fbb0 	bl	8004f7c <_realloc_r>
 800481c:	4606      	mov	r6, r0
 800481e:	2800      	cmp	r0, #0
 8004820:	d1e1      	bne.n	80047e6 <__ssputs_r+0x70>
 8004822:	4650      	mov	r0, sl
 8004824:	6921      	ldr	r1, [r4, #16]
 8004826:	f000 facd 	bl	8004dc4 <_free_r>
 800482a:	e7c7      	b.n	80047bc <__ssputs_r+0x46>

0800482c <_svfiprintf_r>:
 800482c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004830:	4698      	mov	r8, r3
 8004832:	898b      	ldrh	r3, [r1, #12]
 8004834:	4607      	mov	r7, r0
 8004836:	061b      	lsls	r3, r3, #24
 8004838:	460d      	mov	r5, r1
 800483a:	4614      	mov	r4, r2
 800483c:	b09d      	sub	sp, #116	; 0x74
 800483e:	d50e      	bpl.n	800485e <_svfiprintf_r+0x32>
 8004840:	690b      	ldr	r3, [r1, #16]
 8004842:	b963      	cbnz	r3, 800485e <_svfiprintf_r+0x32>
 8004844:	2140      	movs	r1, #64	; 0x40
 8004846:	f000 fb25 	bl	8004e94 <_malloc_r>
 800484a:	6028      	str	r0, [r5, #0]
 800484c:	6128      	str	r0, [r5, #16]
 800484e:	b920      	cbnz	r0, 800485a <_svfiprintf_r+0x2e>
 8004850:	230c      	movs	r3, #12
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	f04f 30ff 	mov.w	r0, #4294967295
 8004858:	e0d1      	b.n	80049fe <_svfiprintf_r+0x1d2>
 800485a:	2340      	movs	r3, #64	; 0x40
 800485c:	616b      	str	r3, [r5, #20]
 800485e:	2300      	movs	r3, #0
 8004860:	9309      	str	r3, [sp, #36]	; 0x24
 8004862:	2320      	movs	r3, #32
 8004864:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004868:	2330      	movs	r3, #48	; 0x30
 800486a:	f04f 0901 	mov.w	r9, #1
 800486e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004872:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a18 <_svfiprintf_r+0x1ec>
 8004876:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800487a:	4623      	mov	r3, r4
 800487c:	469a      	mov	sl, r3
 800487e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004882:	b10a      	cbz	r2, 8004888 <_svfiprintf_r+0x5c>
 8004884:	2a25      	cmp	r2, #37	; 0x25
 8004886:	d1f9      	bne.n	800487c <_svfiprintf_r+0x50>
 8004888:	ebba 0b04 	subs.w	fp, sl, r4
 800488c:	d00b      	beq.n	80048a6 <_svfiprintf_r+0x7a>
 800488e:	465b      	mov	r3, fp
 8004890:	4622      	mov	r2, r4
 8004892:	4629      	mov	r1, r5
 8004894:	4638      	mov	r0, r7
 8004896:	f7ff ff6e 	bl	8004776 <__ssputs_r>
 800489a:	3001      	adds	r0, #1
 800489c:	f000 80aa 	beq.w	80049f4 <_svfiprintf_r+0x1c8>
 80048a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048a2:	445a      	add	r2, fp
 80048a4:	9209      	str	r2, [sp, #36]	; 0x24
 80048a6:	f89a 3000 	ldrb.w	r3, [sl]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 80a2 	beq.w	80049f4 <_svfiprintf_r+0x1c8>
 80048b0:	2300      	movs	r3, #0
 80048b2:	f04f 32ff 	mov.w	r2, #4294967295
 80048b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048ba:	f10a 0a01 	add.w	sl, sl, #1
 80048be:	9304      	str	r3, [sp, #16]
 80048c0:	9307      	str	r3, [sp, #28]
 80048c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048c6:	931a      	str	r3, [sp, #104]	; 0x68
 80048c8:	4654      	mov	r4, sl
 80048ca:	2205      	movs	r2, #5
 80048cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048d0:	4851      	ldr	r0, [pc, #324]	; (8004a18 <_svfiprintf_r+0x1ec>)
 80048d2:	f000 fa41 	bl	8004d58 <memchr>
 80048d6:	9a04      	ldr	r2, [sp, #16]
 80048d8:	b9d8      	cbnz	r0, 8004912 <_svfiprintf_r+0xe6>
 80048da:	06d0      	lsls	r0, r2, #27
 80048dc:	bf44      	itt	mi
 80048de:	2320      	movmi	r3, #32
 80048e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048e4:	0711      	lsls	r1, r2, #28
 80048e6:	bf44      	itt	mi
 80048e8:	232b      	movmi	r3, #43	; 0x2b
 80048ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048ee:	f89a 3000 	ldrb.w	r3, [sl]
 80048f2:	2b2a      	cmp	r3, #42	; 0x2a
 80048f4:	d015      	beq.n	8004922 <_svfiprintf_r+0xf6>
 80048f6:	4654      	mov	r4, sl
 80048f8:	2000      	movs	r0, #0
 80048fa:	f04f 0c0a 	mov.w	ip, #10
 80048fe:	9a07      	ldr	r2, [sp, #28]
 8004900:	4621      	mov	r1, r4
 8004902:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004906:	3b30      	subs	r3, #48	; 0x30
 8004908:	2b09      	cmp	r3, #9
 800490a:	d94e      	bls.n	80049aa <_svfiprintf_r+0x17e>
 800490c:	b1b0      	cbz	r0, 800493c <_svfiprintf_r+0x110>
 800490e:	9207      	str	r2, [sp, #28]
 8004910:	e014      	b.n	800493c <_svfiprintf_r+0x110>
 8004912:	eba0 0308 	sub.w	r3, r0, r8
 8004916:	fa09 f303 	lsl.w	r3, r9, r3
 800491a:	4313      	orrs	r3, r2
 800491c:	46a2      	mov	sl, r4
 800491e:	9304      	str	r3, [sp, #16]
 8004920:	e7d2      	b.n	80048c8 <_svfiprintf_r+0x9c>
 8004922:	9b03      	ldr	r3, [sp, #12]
 8004924:	1d19      	adds	r1, r3, #4
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	9103      	str	r1, [sp, #12]
 800492a:	2b00      	cmp	r3, #0
 800492c:	bfbb      	ittet	lt
 800492e:	425b      	neglt	r3, r3
 8004930:	f042 0202 	orrlt.w	r2, r2, #2
 8004934:	9307      	strge	r3, [sp, #28]
 8004936:	9307      	strlt	r3, [sp, #28]
 8004938:	bfb8      	it	lt
 800493a:	9204      	strlt	r2, [sp, #16]
 800493c:	7823      	ldrb	r3, [r4, #0]
 800493e:	2b2e      	cmp	r3, #46	; 0x2e
 8004940:	d10c      	bne.n	800495c <_svfiprintf_r+0x130>
 8004942:	7863      	ldrb	r3, [r4, #1]
 8004944:	2b2a      	cmp	r3, #42	; 0x2a
 8004946:	d135      	bne.n	80049b4 <_svfiprintf_r+0x188>
 8004948:	9b03      	ldr	r3, [sp, #12]
 800494a:	3402      	adds	r4, #2
 800494c:	1d1a      	adds	r2, r3, #4
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	9203      	str	r2, [sp, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	bfb8      	it	lt
 8004956:	f04f 33ff 	movlt.w	r3, #4294967295
 800495a:	9305      	str	r3, [sp, #20]
 800495c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004a1c <_svfiprintf_r+0x1f0>
 8004960:	2203      	movs	r2, #3
 8004962:	4650      	mov	r0, sl
 8004964:	7821      	ldrb	r1, [r4, #0]
 8004966:	f000 f9f7 	bl	8004d58 <memchr>
 800496a:	b140      	cbz	r0, 800497e <_svfiprintf_r+0x152>
 800496c:	2340      	movs	r3, #64	; 0x40
 800496e:	eba0 000a 	sub.w	r0, r0, sl
 8004972:	fa03 f000 	lsl.w	r0, r3, r0
 8004976:	9b04      	ldr	r3, [sp, #16]
 8004978:	3401      	adds	r4, #1
 800497a:	4303      	orrs	r3, r0
 800497c:	9304      	str	r3, [sp, #16]
 800497e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004982:	2206      	movs	r2, #6
 8004984:	4826      	ldr	r0, [pc, #152]	; (8004a20 <_svfiprintf_r+0x1f4>)
 8004986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800498a:	f000 f9e5 	bl	8004d58 <memchr>
 800498e:	2800      	cmp	r0, #0
 8004990:	d038      	beq.n	8004a04 <_svfiprintf_r+0x1d8>
 8004992:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <_svfiprintf_r+0x1f8>)
 8004994:	bb1b      	cbnz	r3, 80049de <_svfiprintf_r+0x1b2>
 8004996:	9b03      	ldr	r3, [sp, #12]
 8004998:	3307      	adds	r3, #7
 800499a:	f023 0307 	bic.w	r3, r3, #7
 800499e:	3308      	adds	r3, #8
 80049a0:	9303      	str	r3, [sp, #12]
 80049a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049a4:	4433      	add	r3, r6
 80049a6:	9309      	str	r3, [sp, #36]	; 0x24
 80049a8:	e767      	b.n	800487a <_svfiprintf_r+0x4e>
 80049aa:	460c      	mov	r4, r1
 80049ac:	2001      	movs	r0, #1
 80049ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80049b2:	e7a5      	b.n	8004900 <_svfiprintf_r+0xd4>
 80049b4:	2300      	movs	r3, #0
 80049b6:	f04f 0c0a 	mov.w	ip, #10
 80049ba:	4619      	mov	r1, r3
 80049bc:	3401      	adds	r4, #1
 80049be:	9305      	str	r3, [sp, #20]
 80049c0:	4620      	mov	r0, r4
 80049c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049c6:	3a30      	subs	r2, #48	; 0x30
 80049c8:	2a09      	cmp	r2, #9
 80049ca:	d903      	bls.n	80049d4 <_svfiprintf_r+0x1a8>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0c5      	beq.n	800495c <_svfiprintf_r+0x130>
 80049d0:	9105      	str	r1, [sp, #20]
 80049d2:	e7c3      	b.n	800495c <_svfiprintf_r+0x130>
 80049d4:	4604      	mov	r4, r0
 80049d6:	2301      	movs	r3, #1
 80049d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80049dc:	e7f0      	b.n	80049c0 <_svfiprintf_r+0x194>
 80049de:	ab03      	add	r3, sp, #12
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	462a      	mov	r2, r5
 80049e4:	4638      	mov	r0, r7
 80049e6:	4b10      	ldr	r3, [pc, #64]	; (8004a28 <_svfiprintf_r+0x1fc>)
 80049e8:	a904      	add	r1, sp, #16
 80049ea:	f3af 8000 	nop.w
 80049ee:	1c42      	adds	r2, r0, #1
 80049f0:	4606      	mov	r6, r0
 80049f2:	d1d6      	bne.n	80049a2 <_svfiprintf_r+0x176>
 80049f4:	89ab      	ldrh	r3, [r5, #12]
 80049f6:	065b      	lsls	r3, r3, #25
 80049f8:	f53f af2c 	bmi.w	8004854 <_svfiprintf_r+0x28>
 80049fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049fe:	b01d      	add	sp, #116	; 0x74
 8004a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a04:	ab03      	add	r3, sp, #12
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	462a      	mov	r2, r5
 8004a0a:	4638      	mov	r0, r7
 8004a0c:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <_svfiprintf_r+0x1fc>)
 8004a0e:	a904      	add	r1, sp, #16
 8004a10:	f000 f87c 	bl	8004b0c <_printf_i>
 8004a14:	e7eb      	b.n	80049ee <_svfiprintf_r+0x1c2>
 8004a16:	bf00      	nop
 8004a18:	08005810 	.word	0x08005810
 8004a1c:	08005816 	.word	0x08005816
 8004a20:	0800581a 	.word	0x0800581a
 8004a24:	00000000 	.word	0x00000000
 8004a28:	08004777 	.word	0x08004777

08004a2c <_printf_common>:
 8004a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a30:	4616      	mov	r6, r2
 8004a32:	4699      	mov	r9, r3
 8004a34:	688a      	ldr	r2, [r1, #8]
 8004a36:	690b      	ldr	r3, [r1, #16]
 8004a38:	4607      	mov	r7, r0
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	bfb8      	it	lt
 8004a3e:	4613      	movlt	r3, r2
 8004a40:	6033      	str	r3, [r6, #0]
 8004a42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a46:	460c      	mov	r4, r1
 8004a48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a4c:	b10a      	cbz	r2, 8004a52 <_printf_common+0x26>
 8004a4e:	3301      	adds	r3, #1
 8004a50:	6033      	str	r3, [r6, #0]
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	0699      	lsls	r1, r3, #26
 8004a56:	bf42      	ittt	mi
 8004a58:	6833      	ldrmi	r3, [r6, #0]
 8004a5a:	3302      	addmi	r3, #2
 8004a5c:	6033      	strmi	r3, [r6, #0]
 8004a5e:	6825      	ldr	r5, [r4, #0]
 8004a60:	f015 0506 	ands.w	r5, r5, #6
 8004a64:	d106      	bne.n	8004a74 <_printf_common+0x48>
 8004a66:	f104 0a19 	add.w	sl, r4, #25
 8004a6a:	68e3      	ldr	r3, [r4, #12]
 8004a6c:	6832      	ldr	r2, [r6, #0]
 8004a6e:	1a9b      	subs	r3, r3, r2
 8004a70:	42ab      	cmp	r3, r5
 8004a72:	dc28      	bgt.n	8004ac6 <_printf_common+0x9a>
 8004a74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a78:	1e13      	subs	r3, r2, #0
 8004a7a:	6822      	ldr	r2, [r4, #0]
 8004a7c:	bf18      	it	ne
 8004a7e:	2301      	movne	r3, #1
 8004a80:	0692      	lsls	r2, r2, #26
 8004a82:	d42d      	bmi.n	8004ae0 <_printf_common+0xb4>
 8004a84:	4649      	mov	r1, r9
 8004a86:	4638      	mov	r0, r7
 8004a88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a8c:	47c0      	blx	r8
 8004a8e:	3001      	adds	r0, #1
 8004a90:	d020      	beq.n	8004ad4 <_printf_common+0xa8>
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	68e5      	ldr	r5, [r4, #12]
 8004a96:	f003 0306 	and.w	r3, r3, #6
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	bf18      	it	ne
 8004a9e:	2500      	movne	r5, #0
 8004aa0:	6832      	ldr	r2, [r6, #0]
 8004aa2:	f04f 0600 	mov.w	r6, #0
 8004aa6:	68a3      	ldr	r3, [r4, #8]
 8004aa8:	bf08      	it	eq
 8004aaa:	1aad      	subeq	r5, r5, r2
 8004aac:	6922      	ldr	r2, [r4, #16]
 8004aae:	bf08      	it	eq
 8004ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	bfc4      	itt	gt
 8004ab8:	1a9b      	subgt	r3, r3, r2
 8004aba:	18ed      	addgt	r5, r5, r3
 8004abc:	341a      	adds	r4, #26
 8004abe:	42b5      	cmp	r5, r6
 8004ac0:	d11a      	bne.n	8004af8 <_printf_common+0xcc>
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	e008      	b.n	8004ad8 <_printf_common+0xac>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	4652      	mov	r2, sl
 8004aca:	4649      	mov	r1, r9
 8004acc:	4638      	mov	r0, r7
 8004ace:	47c0      	blx	r8
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	d103      	bne.n	8004adc <_printf_common+0xb0>
 8004ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004adc:	3501      	adds	r5, #1
 8004ade:	e7c4      	b.n	8004a6a <_printf_common+0x3e>
 8004ae0:	2030      	movs	r0, #48	; 0x30
 8004ae2:	18e1      	adds	r1, r4, r3
 8004ae4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004aee:	4422      	add	r2, r4
 8004af0:	3302      	adds	r3, #2
 8004af2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004af6:	e7c5      	b.n	8004a84 <_printf_common+0x58>
 8004af8:	2301      	movs	r3, #1
 8004afa:	4622      	mov	r2, r4
 8004afc:	4649      	mov	r1, r9
 8004afe:	4638      	mov	r0, r7
 8004b00:	47c0      	blx	r8
 8004b02:	3001      	adds	r0, #1
 8004b04:	d0e6      	beq.n	8004ad4 <_printf_common+0xa8>
 8004b06:	3601      	adds	r6, #1
 8004b08:	e7d9      	b.n	8004abe <_printf_common+0x92>
	...

08004b0c <_printf_i>:
 8004b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b10:	7e0f      	ldrb	r7, [r1, #24]
 8004b12:	4691      	mov	r9, r2
 8004b14:	2f78      	cmp	r7, #120	; 0x78
 8004b16:	4680      	mov	r8, r0
 8004b18:	460c      	mov	r4, r1
 8004b1a:	469a      	mov	sl, r3
 8004b1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b22:	d807      	bhi.n	8004b34 <_printf_i+0x28>
 8004b24:	2f62      	cmp	r7, #98	; 0x62
 8004b26:	d80a      	bhi.n	8004b3e <_printf_i+0x32>
 8004b28:	2f00      	cmp	r7, #0
 8004b2a:	f000 80d9 	beq.w	8004ce0 <_printf_i+0x1d4>
 8004b2e:	2f58      	cmp	r7, #88	; 0x58
 8004b30:	f000 80a4 	beq.w	8004c7c <_printf_i+0x170>
 8004b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b3c:	e03a      	b.n	8004bb4 <_printf_i+0xa8>
 8004b3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b42:	2b15      	cmp	r3, #21
 8004b44:	d8f6      	bhi.n	8004b34 <_printf_i+0x28>
 8004b46:	a101      	add	r1, pc, #4	; (adr r1, 8004b4c <_printf_i+0x40>)
 8004b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b4c:	08004ba5 	.word	0x08004ba5
 8004b50:	08004bb9 	.word	0x08004bb9
 8004b54:	08004b35 	.word	0x08004b35
 8004b58:	08004b35 	.word	0x08004b35
 8004b5c:	08004b35 	.word	0x08004b35
 8004b60:	08004b35 	.word	0x08004b35
 8004b64:	08004bb9 	.word	0x08004bb9
 8004b68:	08004b35 	.word	0x08004b35
 8004b6c:	08004b35 	.word	0x08004b35
 8004b70:	08004b35 	.word	0x08004b35
 8004b74:	08004b35 	.word	0x08004b35
 8004b78:	08004cc7 	.word	0x08004cc7
 8004b7c:	08004be9 	.word	0x08004be9
 8004b80:	08004ca9 	.word	0x08004ca9
 8004b84:	08004b35 	.word	0x08004b35
 8004b88:	08004b35 	.word	0x08004b35
 8004b8c:	08004ce9 	.word	0x08004ce9
 8004b90:	08004b35 	.word	0x08004b35
 8004b94:	08004be9 	.word	0x08004be9
 8004b98:	08004b35 	.word	0x08004b35
 8004b9c:	08004b35 	.word	0x08004b35
 8004ba0:	08004cb1 	.word	0x08004cb1
 8004ba4:	682b      	ldr	r3, [r5, #0]
 8004ba6:	1d1a      	adds	r2, r3, #4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	602a      	str	r2, [r5, #0]
 8004bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0a4      	b.n	8004d02 <_printf_i+0x1f6>
 8004bb8:	6820      	ldr	r0, [r4, #0]
 8004bba:	6829      	ldr	r1, [r5, #0]
 8004bbc:	0606      	lsls	r6, r0, #24
 8004bbe:	f101 0304 	add.w	r3, r1, #4
 8004bc2:	d50a      	bpl.n	8004bda <_printf_i+0xce>
 8004bc4:	680e      	ldr	r6, [r1, #0]
 8004bc6:	602b      	str	r3, [r5, #0]
 8004bc8:	2e00      	cmp	r6, #0
 8004bca:	da03      	bge.n	8004bd4 <_printf_i+0xc8>
 8004bcc:	232d      	movs	r3, #45	; 0x2d
 8004bce:	4276      	negs	r6, r6
 8004bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bd4:	230a      	movs	r3, #10
 8004bd6:	485e      	ldr	r0, [pc, #376]	; (8004d50 <_printf_i+0x244>)
 8004bd8:	e019      	b.n	8004c0e <_printf_i+0x102>
 8004bda:	680e      	ldr	r6, [r1, #0]
 8004bdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004be0:	602b      	str	r3, [r5, #0]
 8004be2:	bf18      	it	ne
 8004be4:	b236      	sxthne	r6, r6
 8004be6:	e7ef      	b.n	8004bc8 <_printf_i+0xbc>
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	6820      	ldr	r0, [r4, #0]
 8004bec:	1d19      	adds	r1, r3, #4
 8004bee:	6029      	str	r1, [r5, #0]
 8004bf0:	0601      	lsls	r1, r0, #24
 8004bf2:	d501      	bpl.n	8004bf8 <_printf_i+0xec>
 8004bf4:	681e      	ldr	r6, [r3, #0]
 8004bf6:	e002      	b.n	8004bfe <_printf_i+0xf2>
 8004bf8:	0646      	lsls	r6, r0, #25
 8004bfa:	d5fb      	bpl.n	8004bf4 <_printf_i+0xe8>
 8004bfc:	881e      	ldrh	r6, [r3, #0]
 8004bfe:	2f6f      	cmp	r7, #111	; 0x6f
 8004c00:	bf0c      	ite	eq
 8004c02:	2308      	moveq	r3, #8
 8004c04:	230a      	movne	r3, #10
 8004c06:	4852      	ldr	r0, [pc, #328]	; (8004d50 <_printf_i+0x244>)
 8004c08:	2100      	movs	r1, #0
 8004c0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c0e:	6865      	ldr	r5, [r4, #4]
 8004c10:	2d00      	cmp	r5, #0
 8004c12:	bfa8      	it	ge
 8004c14:	6821      	ldrge	r1, [r4, #0]
 8004c16:	60a5      	str	r5, [r4, #8]
 8004c18:	bfa4      	itt	ge
 8004c1a:	f021 0104 	bicge.w	r1, r1, #4
 8004c1e:	6021      	strge	r1, [r4, #0]
 8004c20:	b90e      	cbnz	r6, 8004c26 <_printf_i+0x11a>
 8004c22:	2d00      	cmp	r5, #0
 8004c24:	d04d      	beq.n	8004cc2 <_printf_i+0x1b6>
 8004c26:	4615      	mov	r5, r2
 8004c28:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c2c:	fb03 6711 	mls	r7, r3, r1, r6
 8004c30:	5dc7      	ldrb	r7, [r0, r7]
 8004c32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c36:	4637      	mov	r7, r6
 8004c38:	42bb      	cmp	r3, r7
 8004c3a:	460e      	mov	r6, r1
 8004c3c:	d9f4      	bls.n	8004c28 <_printf_i+0x11c>
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d10b      	bne.n	8004c5a <_printf_i+0x14e>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	07de      	lsls	r6, r3, #31
 8004c46:	d508      	bpl.n	8004c5a <_printf_i+0x14e>
 8004c48:	6923      	ldr	r3, [r4, #16]
 8004c4a:	6861      	ldr	r1, [r4, #4]
 8004c4c:	4299      	cmp	r1, r3
 8004c4e:	bfde      	ittt	le
 8004c50:	2330      	movle	r3, #48	; 0x30
 8004c52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c5a:	1b52      	subs	r2, r2, r5
 8004c5c:	6122      	str	r2, [r4, #16]
 8004c5e:	464b      	mov	r3, r9
 8004c60:	4621      	mov	r1, r4
 8004c62:	4640      	mov	r0, r8
 8004c64:	f8cd a000 	str.w	sl, [sp]
 8004c68:	aa03      	add	r2, sp, #12
 8004c6a:	f7ff fedf 	bl	8004a2c <_printf_common>
 8004c6e:	3001      	adds	r0, #1
 8004c70:	d14c      	bne.n	8004d0c <_printf_i+0x200>
 8004c72:	f04f 30ff 	mov.w	r0, #4294967295
 8004c76:	b004      	add	sp, #16
 8004c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7c:	4834      	ldr	r0, [pc, #208]	; (8004d50 <_printf_i+0x244>)
 8004c7e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c82:	6829      	ldr	r1, [r5, #0]
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c8a:	6029      	str	r1, [r5, #0]
 8004c8c:	061d      	lsls	r5, r3, #24
 8004c8e:	d514      	bpl.n	8004cba <_printf_i+0x1ae>
 8004c90:	07df      	lsls	r7, r3, #31
 8004c92:	bf44      	itt	mi
 8004c94:	f043 0320 	orrmi.w	r3, r3, #32
 8004c98:	6023      	strmi	r3, [r4, #0]
 8004c9a:	b91e      	cbnz	r6, 8004ca4 <_printf_i+0x198>
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	f023 0320 	bic.w	r3, r3, #32
 8004ca2:	6023      	str	r3, [r4, #0]
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	e7af      	b.n	8004c08 <_printf_i+0xfc>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	f043 0320 	orr.w	r3, r3, #32
 8004cae:	6023      	str	r3, [r4, #0]
 8004cb0:	2378      	movs	r3, #120	; 0x78
 8004cb2:	4828      	ldr	r0, [pc, #160]	; (8004d54 <_printf_i+0x248>)
 8004cb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cb8:	e7e3      	b.n	8004c82 <_printf_i+0x176>
 8004cba:	0659      	lsls	r1, r3, #25
 8004cbc:	bf48      	it	mi
 8004cbe:	b2b6      	uxthmi	r6, r6
 8004cc0:	e7e6      	b.n	8004c90 <_printf_i+0x184>
 8004cc2:	4615      	mov	r5, r2
 8004cc4:	e7bb      	b.n	8004c3e <_printf_i+0x132>
 8004cc6:	682b      	ldr	r3, [r5, #0]
 8004cc8:	6826      	ldr	r6, [r4, #0]
 8004cca:	1d18      	adds	r0, r3, #4
 8004ccc:	6961      	ldr	r1, [r4, #20]
 8004cce:	6028      	str	r0, [r5, #0]
 8004cd0:	0635      	lsls	r5, r6, #24
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	d501      	bpl.n	8004cda <_printf_i+0x1ce>
 8004cd6:	6019      	str	r1, [r3, #0]
 8004cd8:	e002      	b.n	8004ce0 <_printf_i+0x1d4>
 8004cda:	0670      	lsls	r0, r6, #25
 8004cdc:	d5fb      	bpl.n	8004cd6 <_printf_i+0x1ca>
 8004cde:	8019      	strh	r1, [r3, #0]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	4615      	mov	r5, r2
 8004ce4:	6123      	str	r3, [r4, #16]
 8004ce6:	e7ba      	b.n	8004c5e <_printf_i+0x152>
 8004ce8:	682b      	ldr	r3, [r5, #0]
 8004cea:	2100      	movs	r1, #0
 8004cec:	1d1a      	adds	r2, r3, #4
 8004cee:	602a      	str	r2, [r5, #0]
 8004cf0:	681d      	ldr	r5, [r3, #0]
 8004cf2:	6862      	ldr	r2, [r4, #4]
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	f000 f82f 	bl	8004d58 <memchr>
 8004cfa:	b108      	cbz	r0, 8004d00 <_printf_i+0x1f4>
 8004cfc:	1b40      	subs	r0, r0, r5
 8004cfe:	6060      	str	r0, [r4, #4]
 8004d00:	6863      	ldr	r3, [r4, #4]
 8004d02:	6123      	str	r3, [r4, #16]
 8004d04:	2300      	movs	r3, #0
 8004d06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d0a:	e7a8      	b.n	8004c5e <_printf_i+0x152>
 8004d0c:	462a      	mov	r2, r5
 8004d0e:	4649      	mov	r1, r9
 8004d10:	4640      	mov	r0, r8
 8004d12:	6923      	ldr	r3, [r4, #16]
 8004d14:	47d0      	blx	sl
 8004d16:	3001      	adds	r0, #1
 8004d18:	d0ab      	beq.n	8004c72 <_printf_i+0x166>
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	079b      	lsls	r3, r3, #30
 8004d1e:	d413      	bmi.n	8004d48 <_printf_i+0x23c>
 8004d20:	68e0      	ldr	r0, [r4, #12]
 8004d22:	9b03      	ldr	r3, [sp, #12]
 8004d24:	4298      	cmp	r0, r3
 8004d26:	bfb8      	it	lt
 8004d28:	4618      	movlt	r0, r3
 8004d2a:	e7a4      	b.n	8004c76 <_printf_i+0x16a>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	4632      	mov	r2, r6
 8004d30:	4649      	mov	r1, r9
 8004d32:	4640      	mov	r0, r8
 8004d34:	47d0      	blx	sl
 8004d36:	3001      	adds	r0, #1
 8004d38:	d09b      	beq.n	8004c72 <_printf_i+0x166>
 8004d3a:	3501      	adds	r5, #1
 8004d3c:	68e3      	ldr	r3, [r4, #12]
 8004d3e:	9903      	ldr	r1, [sp, #12]
 8004d40:	1a5b      	subs	r3, r3, r1
 8004d42:	42ab      	cmp	r3, r5
 8004d44:	dcf2      	bgt.n	8004d2c <_printf_i+0x220>
 8004d46:	e7eb      	b.n	8004d20 <_printf_i+0x214>
 8004d48:	2500      	movs	r5, #0
 8004d4a:	f104 0619 	add.w	r6, r4, #25
 8004d4e:	e7f5      	b.n	8004d3c <_printf_i+0x230>
 8004d50:	08005821 	.word	0x08005821
 8004d54:	08005832 	.word	0x08005832

08004d58 <memchr>:
 8004d58:	4603      	mov	r3, r0
 8004d5a:	b510      	push	{r4, lr}
 8004d5c:	b2c9      	uxtb	r1, r1
 8004d5e:	4402      	add	r2, r0
 8004d60:	4293      	cmp	r3, r2
 8004d62:	4618      	mov	r0, r3
 8004d64:	d101      	bne.n	8004d6a <memchr+0x12>
 8004d66:	2000      	movs	r0, #0
 8004d68:	e003      	b.n	8004d72 <memchr+0x1a>
 8004d6a:	7804      	ldrb	r4, [r0, #0]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	428c      	cmp	r4, r1
 8004d70:	d1f6      	bne.n	8004d60 <memchr+0x8>
 8004d72:	bd10      	pop	{r4, pc}

08004d74 <memcpy>:
 8004d74:	440a      	add	r2, r1
 8004d76:	4291      	cmp	r1, r2
 8004d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d7c:	d100      	bne.n	8004d80 <memcpy+0xc>
 8004d7e:	4770      	bx	lr
 8004d80:	b510      	push	{r4, lr}
 8004d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d86:	4291      	cmp	r1, r2
 8004d88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d8c:	d1f9      	bne.n	8004d82 <memcpy+0xe>
 8004d8e:	bd10      	pop	{r4, pc}

08004d90 <memmove>:
 8004d90:	4288      	cmp	r0, r1
 8004d92:	b510      	push	{r4, lr}
 8004d94:	eb01 0402 	add.w	r4, r1, r2
 8004d98:	d902      	bls.n	8004da0 <memmove+0x10>
 8004d9a:	4284      	cmp	r4, r0
 8004d9c:	4623      	mov	r3, r4
 8004d9e:	d807      	bhi.n	8004db0 <memmove+0x20>
 8004da0:	1e43      	subs	r3, r0, #1
 8004da2:	42a1      	cmp	r1, r4
 8004da4:	d008      	beq.n	8004db8 <memmove+0x28>
 8004da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004daa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dae:	e7f8      	b.n	8004da2 <memmove+0x12>
 8004db0:	4601      	mov	r1, r0
 8004db2:	4402      	add	r2, r0
 8004db4:	428a      	cmp	r2, r1
 8004db6:	d100      	bne.n	8004dba <memmove+0x2a>
 8004db8:	bd10      	pop	{r4, pc}
 8004dba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dc2:	e7f7      	b.n	8004db4 <memmove+0x24>

08004dc4 <_free_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4605      	mov	r5, r0
 8004dc8:	2900      	cmp	r1, #0
 8004dca:	d040      	beq.n	8004e4e <_free_r+0x8a>
 8004dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dd0:	1f0c      	subs	r4, r1, #4
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bfb8      	it	lt
 8004dd6:	18e4      	addlt	r4, r4, r3
 8004dd8:	f000 f910 	bl	8004ffc <__malloc_lock>
 8004ddc:	4a1c      	ldr	r2, [pc, #112]	; (8004e50 <_free_r+0x8c>)
 8004dde:	6813      	ldr	r3, [r2, #0]
 8004de0:	b933      	cbnz	r3, 8004df0 <_free_r+0x2c>
 8004de2:	6063      	str	r3, [r4, #4]
 8004de4:	6014      	str	r4, [r2, #0]
 8004de6:	4628      	mov	r0, r5
 8004de8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dec:	f000 b90c 	b.w	8005008 <__malloc_unlock>
 8004df0:	42a3      	cmp	r3, r4
 8004df2:	d908      	bls.n	8004e06 <_free_r+0x42>
 8004df4:	6820      	ldr	r0, [r4, #0]
 8004df6:	1821      	adds	r1, r4, r0
 8004df8:	428b      	cmp	r3, r1
 8004dfa:	bf01      	itttt	eq
 8004dfc:	6819      	ldreq	r1, [r3, #0]
 8004dfe:	685b      	ldreq	r3, [r3, #4]
 8004e00:	1809      	addeq	r1, r1, r0
 8004e02:	6021      	streq	r1, [r4, #0]
 8004e04:	e7ed      	b.n	8004de2 <_free_r+0x1e>
 8004e06:	461a      	mov	r2, r3
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	b10b      	cbz	r3, 8004e10 <_free_r+0x4c>
 8004e0c:	42a3      	cmp	r3, r4
 8004e0e:	d9fa      	bls.n	8004e06 <_free_r+0x42>
 8004e10:	6811      	ldr	r1, [r2, #0]
 8004e12:	1850      	adds	r0, r2, r1
 8004e14:	42a0      	cmp	r0, r4
 8004e16:	d10b      	bne.n	8004e30 <_free_r+0x6c>
 8004e18:	6820      	ldr	r0, [r4, #0]
 8004e1a:	4401      	add	r1, r0
 8004e1c:	1850      	adds	r0, r2, r1
 8004e1e:	4283      	cmp	r3, r0
 8004e20:	6011      	str	r1, [r2, #0]
 8004e22:	d1e0      	bne.n	8004de6 <_free_r+0x22>
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	4401      	add	r1, r0
 8004e2a:	6011      	str	r1, [r2, #0]
 8004e2c:	6053      	str	r3, [r2, #4]
 8004e2e:	e7da      	b.n	8004de6 <_free_r+0x22>
 8004e30:	d902      	bls.n	8004e38 <_free_r+0x74>
 8004e32:	230c      	movs	r3, #12
 8004e34:	602b      	str	r3, [r5, #0]
 8004e36:	e7d6      	b.n	8004de6 <_free_r+0x22>
 8004e38:	6820      	ldr	r0, [r4, #0]
 8004e3a:	1821      	adds	r1, r4, r0
 8004e3c:	428b      	cmp	r3, r1
 8004e3e:	bf01      	itttt	eq
 8004e40:	6819      	ldreq	r1, [r3, #0]
 8004e42:	685b      	ldreq	r3, [r3, #4]
 8004e44:	1809      	addeq	r1, r1, r0
 8004e46:	6021      	streq	r1, [r4, #0]
 8004e48:	6063      	str	r3, [r4, #4]
 8004e4a:	6054      	str	r4, [r2, #4]
 8004e4c:	e7cb      	b.n	8004de6 <_free_r+0x22>
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	200005dc 	.word	0x200005dc

08004e54 <sbrk_aligned>:
 8004e54:	b570      	push	{r4, r5, r6, lr}
 8004e56:	4e0e      	ldr	r6, [pc, #56]	; (8004e90 <sbrk_aligned+0x3c>)
 8004e58:	460c      	mov	r4, r1
 8004e5a:	6831      	ldr	r1, [r6, #0]
 8004e5c:	4605      	mov	r5, r0
 8004e5e:	b911      	cbnz	r1, 8004e66 <sbrk_aligned+0x12>
 8004e60:	f000 f8bc 	bl	8004fdc <_sbrk_r>
 8004e64:	6030      	str	r0, [r6, #0]
 8004e66:	4621      	mov	r1, r4
 8004e68:	4628      	mov	r0, r5
 8004e6a:	f000 f8b7 	bl	8004fdc <_sbrk_r>
 8004e6e:	1c43      	adds	r3, r0, #1
 8004e70:	d00a      	beq.n	8004e88 <sbrk_aligned+0x34>
 8004e72:	1cc4      	adds	r4, r0, #3
 8004e74:	f024 0403 	bic.w	r4, r4, #3
 8004e78:	42a0      	cmp	r0, r4
 8004e7a:	d007      	beq.n	8004e8c <sbrk_aligned+0x38>
 8004e7c:	1a21      	subs	r1, r4, r0
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f000 f8ac 	bl	8004fdc <_sbrk_r>
 8004e84:	3001      	adds	r0, #1
 8004e86:	d101      	bne.n	8004e8c <sbrk_aligned+0x38>
 8004e88:	f04f 34ff 	mov.w	r4, #4294967295
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	bd70      	pop	{r4, r5, r6, pc}
 8004e90:	200005e0 	.word	0x200005e0

08004e94 <_malloc_r>:
 8004e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e98:	1ccd      	adds	r5, r1, #3
 8004e9a:	f025 0503 	bic.w	r5, r5, #3
 8004e9e:	3508      	adds	r5, #8
 8004ea0:	2d0c      	cmp	r5, #12
 8004ea2:	bf38      	it	cc
 8004ea4:	250c      	movcc	r5, #12
 8004ea6:	2d00      	cmp	r5, #0
 8004ea8:	4607      	mov	r7, r0
 8004eaa:	db01      	blt.n	8004eb0 <_malloc_r+0x1c>
 8004eac:	42a9      	cmp	r1, r5
 8004eae:	d905      	bls.n	8004ebc <_malloc_r+0x28>
 8004eb0:	230c      	movs	r3, #12
 8004eb2:	2600      	movs	r6, #0
 8004eb4:	603b      	str	r3, [r7, #0]
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ebc:	4e2e      	ldr	r6, [pc, #184]	; (8004f78 <_malloc_r+0xe4>)
 8004ebe:	f000 f89d 	bl	8004ffc <__malloc_lock>
 8004ec2:	6833      	ldr	r3, [r6, #0]
 8004ec4:	461c      	mov	r4, r3
 8004ec6:	bb34      	cbnz	r4, 8004f16 <_malloc_r+0x82>
 8004ec8:	4629      	mov	r1, r5
 8004eca:	4638      	mov	r0, r7
 8004ecc:	f7ff ffc2 	bl	8004e54 <sbrk_aligned>
 8004ed0:	1c43      	adds	r3, r0, #1
 8004ed2:	4604      	mov	r4, r0
 8004ed4:	d14d      	bne.n	8004f72 <_malloc_r+0xde>
 8004ed6:	6834      	ldr	r4, [r6, #0]
 8004ed8:	4626      	mov	r6, r4
 8004eda:	2e00      	cmp	r6, #0
 8004edc:	d140      	bne.n	8004f60 <_malloc_r+0xcc>
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	4631      	mov	r1, r6
 8004ee2:	4638      	mov	r0, r7
 8004ee4:	eb04 0803 	add.w	r8, r4, r3
 8004ee8:	f000 f878 	bl	8004fdc <_sbrk_r>
 8004eec:	4580      	cmp	r8, r0
 8004eee:	d13a      	bne.n	8004f66 <_malloc_r+0xd2>
 8004ef0:	6821      	ldr	r1, [r4, #0]
 8004ef2:	3503      	adds	r5, #3
 8004ef4:	1a6d      	subs	r5, r5, r1
 8004ef6:	f025 0503 	bic.w	r5, r5, #3
 8004efa:	3508      	adds	r5, #8
 8004efc:	2d0c      	cmp	r5, #12
 8004efe:	bf38      	it	cc
 8004f00:	250c      	movcc	r5, #12
 8004f02:	4638      	mov	r0, r7
 8004f04:	4629      	mov	r1, r5
 8004f06:	f7ff ffa5 	bl	8004e54 <sbrk_aligned>
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	d02b      	beq.n	8004f66 <_malloc_r+0xd2>
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	442b      	add	r3, r5
 8004f12:	6023      	str	r3, [r4, #0]
 8004f14:	e00e      	b.n	8004f34 <_malloc_r+0xa0>
 8004f16:	6822      	ldr	r2, [r4, #0]
 8004f18:	1b52      	subs	r2, r2, r5
 8004f1a:	d41e      	bmi.n	8004f5a <_malloc_r+0xc6>
 8004f1c:	2a0b      	cmp	r2, #11
 8004f1e:	d916      	bls.n	8004f4e <_malloc_r+0xba>
 8004f20:	1961      	adds	r1, r4, r5
 8004f22:	42a3      	cmp	r3, r4
 8004f24:	6025      	str	r5, [r4, #0]
 8004f26:	bf18      	it	ne
 8004f28:	6059      	strne	r1, [r3, #4]
 8004f2a:	6863      	ldr	r3, [r4, #4]
 8004f2c:	bf08      	it	eq
 8004f2e:	6031      	streq	r1, [r6, #0]
 8004f30:	5162      	str	r2, [r4, r5]
 8004f32:	604b      	str	r3, [r1, #4]
 8004f34:	4638      	mov	r0, r7
 8004f36:	f104 060b 	add.w	r6, r4, #11
 8004f3a:	f000 f865 	bl	8005008 <__malloc_unlock>
 8004f3e:	f026 0607 	bic.w	r6, r6, #7
 8004f42:	1d23      	adds	r3, r4, #4
 8004f44:	1af2      	subs	r2, r6, r3
 8004f46:	d0b6      	beq.n	8004eb6 <_malloc_r+0x22>
 8004f48:	1b9b      	subs	r3, r3, r6
 8004f4a:	50a3      	str	r3, [r4, r2]
 8004f4c:	e7b3      	b.n	8004eb6 <_malloc_r+0x22>
 8004f4e:	6862      	ldr	r2, [r4, #4]
 8004f50:	42a3      	cmp	r3, r4
 8004f52:	bf0c      	ite	eq
 8004f54:	6032      	streq	r2, [r6, #0]
 8004f56:	605a      	strne	r2, [r3, #4]
 8004f58:	e7ec      	b.n	8004f34 <_malloc_r+0xa0>
 8004f5a:	4623      	mov	r3, r4
 8004f5c:	6864      	ldr	r4, [r4, #4]
 8004f5e:	e7b2      	b.n	8004ec6 <_malloc_r+0x32>
 8004f60:	4634      	mov	r4, r6
 8004f62:	6876      	ldr	r6, [r6, #4]
 8004f64:	e7b9      	b.n	8004eda <_malloc_r+0x46>
 8004f66:	230c      	movs	r3, #12
 8004f68:	4638      	mov	r0, r7
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	f000 f84c 	bl	8005008 <__malloc_unlock>
 8004f70:	e7a1      	b.n	8004eb6 <_malloc_r+0x22>
 8004f72:	6025      	str	r5, [r4, #0]
 8004f74:	e7de      	b.n	8004f34 <_malloc_r+0xa0>
 8004f76:	bf00      	nop
 8004f78:	200005dc 	.word	0x200005dc

08004f7c <_realloc_r>:
 8004f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f80:	4680      	mov	r8, r0
 8004f82:	4614      	mov	r4, r2
 8004f84:	460e      	mov	r6, r1
 8004f86:	b921      	cbnz	r1, 8004f92 <_realloc_r+0x16>
 8004f88:	4611      	mov	r1, r2
 8004f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f8e:	f7ff bf81 	b.w	8004e94 <_malloc_r>
 8004f92:	b92a      	cbnz	r2, 8004fa0 <_realloc_r+0x24>
 8004f94:	f7ff ff16 	bl	8004dc4 <_free_r>
 8004f98:	4625      	mov	r5, r4
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa0:	f000 f838 	bl	8005014 <_malloc_usable_size_r>
 8004fa4:	4284      	cmp	r4, r0
 8004fa6:	4607      	mov	r7, r0
 8004fa8:	d802      	bhi.n	8004fb0 <_realloc_r+0x34>
 8004faa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004fae:	d812      	bhi.n	8004fd6 <_realloc_r+0x5a>
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	4640      	mov	r0, r8
 8004fb4:	f7ff ff6e 	bl	8004e94 <_malloc_r>
 8004fb8:	4605      	mov	r5, r0
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d0ed      	beq.n	8004f9a <_realloc_r+0x1e>
 8004fbe:	42bc      	cmp	r4, r7
 8004fc0:	4622      	mov	r2, r4
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	bf28      	it	cs
 8004fc6:	463a      	movcs	r2, r7
 8004fc8:	f7ff fed4 	bl	8004d74 <memcpy>
 8004fcc:	4631      	mov	r1, r6
 8004fce:	4640      	mov	r0, r8
 8004fd0:	f7ff fef8 	bl	8004dc4 <_free_r>
 8004fd4:	e7e1      	b.n	8004f9a <_realloc_r+0x1e>
 8004fd6:	4635      	mov	r5, r6
 8004fd8:	e7df      	b.n	8004f9a <_realloc_r+0x1e>
	...

08004fdc <_sbrk_r>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	2300      	movs	r3, #0
 8004fe0:	4d05      	ldr	r5, [pc, #20]	; (8004ff8 <_sbrk_r+0x1c>)
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	4608      	mov	r0, r1
 8004fe6:	602b      	str	r3, [r5, #0]
 8004fe8:	f7fc fcd2 	bl	8001990 <_sbrk>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d102      	bne.n	8004ff6 <_sbrk_r+0x1a>
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	b103      	cbz	r3, 8004ff6 <_sbrk_r+0x1a>
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	bd38      	pop	{r3, r4, r5, pc}
 8004ff8:	200005e4 	.word	0x200005e4

08004ffc <__malloc_lock>:
 8004ffc:	4801      	ldr	r0, [pc, #4]	; (8005004 <__malloc_lock+0x8>)
 8004ffe:	f000 b811 	b.w	8005024 <__retarget_lock_acquire_recursive>
 8005002:	bf00      	nop
 8005004:	200005e8 	.word	0x200005e8

08005008 <__malloc_unlock>:
 8005008:	4801      	ldr	r0, [pc, #4]	; (8005010 <__malloc_unlock+0x8>)
 800500a:	f000 b80c 	b.w	8005026 <__retarget_lock_release_recursive>
 800500e:	bf00      	nop
 8005010:	200005e8 	.word	0x200005e8

08005014 <_malloc_usable_size_r>:
 8005014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005018:	1f18      	subs	r0, r3, #4
 800501a:	2b00      	cmp	r3, #0
 800501c:	bfbc      	itt	lt
 800501e:	580b      	ldrlt	r3, [r1, r0]
 8005020:	18c0      	addlt	r0, r0, r3
 8005022:	4770      	bx	lr

08005024 <__retarget_lock_acquire_recursive>:
 8005024:	4770      	bx	lr

08005026 <__retarget_lock_release_recursive>:
 8005026:	4770      	bx	lr

08005028 <_init>:
 8005028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502a:	bf00      	nop
 800502c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502e:	bc08      	pop	{r3}
 8005030:	469e      	mov	lr, r3
 8005032:	4770      	bx	lr

08005034 <_fini>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	bf00      	nop
 8005038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503a:	bc08      	pop	{r3}
 800503c:	469e      	mov	lr, r3
 800503e:	4770      	bx	lr
